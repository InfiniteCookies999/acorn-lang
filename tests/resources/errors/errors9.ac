import std;
import std.Error;

struct TestError1 :: *Error {
    const char* get_name() const {
        return "TestError1";
    }
    const char* get_message() const {
        return "test error msg 1";
    }
}

struct TestError2 :: *Error {
    int64 a;
    int64 b;
    int64 c;
    int64 d;

    const char* get_name() const {
        return "TestError2";
    }
    const char* get_message() const {
        return "test error msg 2";
    }
}

void foo(bool b) raises TestError1, TestError2 {
    std.print("foo called!");
    if b {
        raise TestError1{};
    } else {
        raise TestError2{ 65, 66, 67, 68 };
    }
}

void write_val(int64 val) {

#if OS_GROUP_WINDOWS
    void* handle = std.GetStdHandle(-11);
    uint32 written;
    char c = as(char) val;
    std.WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    char c = as(char) val;
    std.write(1, &c, 1);
#endif

}

void main() {
    try err: foo(true) {
        std.print("caught error!");
        std.print(err.get_message());
    };
    try err: foo(false) {
        std.print("caught error!");
        std.print(err.get_message());
        TestError2* e2 = as(TestError2*) err;
        write_val(e2.a);
        write_val(e2.b);
        write_val(e2.c);
        write_val(e2.d);
    };
}