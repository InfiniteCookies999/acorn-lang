#file(access=public, namespace=reflect)

/*
 * Represents the kind of a Type in acorn.
 */
enum TypeId {

    Int,

    Int8,
    Int16,
    Int32,
    Int64,
    ISize,

    UInt8,
    UInt16,
    UInt32,
    UInt64,
    USize,

    Char,
    Char16,

    Float32,
    Float64,

    Void,
    Bool,
    FuncsRef,      // A reference to an identifier to overloaded functions.
    NamespaceRef,  // A reference to an identifier to a namespace.
    Pointer,
    Array,
    Slice,
    EmptyArray,
    UnresolvedBracket, // Length could not be resolved during parsing.
    Null,
    AssignDeterminedArray,
    Function,
    UnresolvedComposite,
    Struct,
    Enum,
    Interface,
    EnumContainer,
    Range,
    Auto,
    Expr, // A type that appears as part of an expression in code.
    Invalid,

}

struct FieldTypeInfo {
    const char* name;
    const Type* type;
    int         offset_in_bytes;
}

struct StructTypeInfo {
    const char*          name;
    int                  num_fields;
    const FieldTypeInfo* fields;
}

struct EnumTypeInfo {
    int          num_values;
    uint64       index_mapping_mask;
    uint64[2]*   index_mappings;
    const char** value_names;
    const Type*  index_type;

    uint64 get_enum_offset(uint64 index) const {

        // Linear probe over the hashed values to find the
        // actual offset that the index refers to in the enum.
        uint64 hash = index & index_mapping_mask;
        uint64 bucket_index = hash;

        loop {
            const uint64[2]* bucket = index_mappings + bucket_index;
            if (*bucket)[0] == index {
                // Still have to check for -1 because it is possible the user wanted
                // to store a -1 index value in the enum and -1 is used for empty keys.
                if (*bucket)[1] != -1 {
                    return (*bucket)[1];
                }
            }

            ++bucket_index;
            bucket_index &= index_mapping_mask;
        }

        return 0;
    }

    const char* get_value_name(uint64 index) const {
        uint64 offset = get_enum_offset(index);
        return value_names[offset];
    }
}

struct Type {

    TypeId id;
    int    size_in_bytes;

    // Element type of pointers, arrays, and slices.
    const Type*           elm_type;
    // If the type is an array this is the length.
    int                   array_length;
    const StructTypeInfo* struct_info;
    const EnumTypeInfo*   enum_info;

    bool is_integer() const {
        return id <= TypeId.USize;
    }

    bool is_number() const {
        return is_integer() || id == TypeId.Float32 || id == TypeId.Float64;
    }

    bool is_signed() const {
        return id <= TypeId.ISize;
    }

    bool is_any_pointer() const {
        return id == TypeId.Pointer || id == TypeId.Function || id == TypeId.Null;
    }

    bool is_string() const {
        if id == TypeId.Pointer {
            return elm_type.id == TypeId.Char;
        } elif id == TypeId.Struct {
            return this == #type_info(String);
        } else {
            return false;
        }
    }
}