import std;
import std.Error;

struct TestError :: *Error {
    const fn get_name() -> const char* {
        return "TestError";
    }
    const fn get_message() -> const char* {
        return "error raised!";
    }
}

fn write_val(val: int) {

#if OS_GROUP_WINDOWS
    handle: void* = std.GetStdHandle(-11);
    written: uint32;
    c: char = as(char) val;
    std.WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    c: char = as(char) val;
    std.write(1, &c, 1);
#endif

}

struct B {
    v: int;

    fn delete() {
        std.print("B deconstructor called!");
    }
}

struct A {

    fn f(b: bool) -> B | raises TestError {
        if (b) {
            raise TestError{};
        } else {
            return B{ 64 };
        }
    }

    fn delete() {
        std.print("A deconstructor called!");
    }
}

fn foo() -> A {
    return A{};
}

fn bar(b: bool) | raises TestError {
    b2: B = try (foo().f(b));
    write_val(b2.v);
}

fn main() {
    try (bar(false));
    std.print("...");
    try (bar(true));
    std.print("end");
}
