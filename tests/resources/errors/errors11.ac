import std;
import std.Error;

struct TestError :: *Error {
    const fn get_name() -> const char* {
        return "TestError";
    }
    const fn get_message() -> const char* {
        return "error raised!";
    }
}

fn write_val(val: int) {

#if OS_GROUP_WINDOWS
    handle: void* = std.GetStdHandle(-11);
    written: uint32;
    c: char = as(char) val;
    std.WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    c: char = as(char) val;
    std.write(1, &c, 1);
#endif

}

fn foo(b: bool) -> int | raises TestError {
    if (b) {
        raise TestError{};
    } else {
        return 64;
    }
}

fn main() {
    a1: int;
    a1 = try (foo(false)) {
        std.print("I am not called");
        return;
    };

    write_val(a1);

    a2: int;
    a2 = try (foo(true)) {
        std.print("error caught!");
        return;
    };

    std.print("I am not reached");
}
