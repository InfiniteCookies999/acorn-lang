
#if OS_GROUP_WINDOWS

native dllimport fn GetStdHandle(nStdHandle: uint32) -> void*;

native dllimport fn WriteFile(hFile:                  void*,
                              lpBuffer:               const void*,
                              nNumberOfBytesToWrite:  uint32,
                              lpNumberOfBytesWritten: uint32*,
                              lpOverlapped:           void*
                              ) -> int32;

#elif OS_GROUP_UNIX

native fn write(fd: int32, buf: const void*, count: usize) -> isize;

#endif

fn write_val(val: int8) {

#if OS_GROUP_WINDOWS
    handle: void* = GetStdHandle(-11);
    written: uint32;
    c: char = as(char) val;
    WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    c: char = as(char) val;
    write(1, &c, 1);
#endif

}

struct A {
    v1: int64;
    v2: int64;
    v3: int64;
    v4: int64;

    fn bar1() -> int64 {
        return v1;
    }

    fn bar2() -> int64 {
        return v2;
    }

    fn bar3() -> int64 {
        return v3;
    }

    fn bar4() -> int64 {
        return v4;
    }
}

fn foo() -> A {
    return A{65, 66, 67, 68};
}

fn main() {
    v1: int64 = foo().bar1();
    v2: int64 = foo().bar2();
    v3: int64 = foo().bar3();
    v4: int64 = foo().bar4();
    write_val(v1);
    write_val(v2);
    write_val(v3);
    write_val(v4);
}