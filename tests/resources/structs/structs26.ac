
#if OS_GROUP_WINDOWS

native dllimport fn GetStdHandle(nStdHandle: uint32) -> void*;

native dllimport fn WriteFile(hFile:                  void*,
                              lpBuffer:               const void*,
                              nNumberOfBytesToWrite:  uint32,
                              lpNumberOfBytesWritten: uint32*,
                              lpOverlapped:           void*
                              ) -> int32;

#elif OS_GROUP_UNIX

native fn write(fd: int32, buf: const void*, count: usize) -> isize;

#endif

fn write_val(val: int64) {

#if OS_GROUP_WINDOWS
    handle: void* = GetStdHandle(-11);
    written: uint32;
    c: char = as(char) val;
    WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    c: char = as(char) val;
    write(1, &c, 1);
#endif

}

struct A {
    a: int64;
    b: int64;
    c: int64;
    d: int64;
}

fn foo(t: bool) -> A {
    a1: A;
    a1.a = 65;
    a1.b = 66;
    a1.c = 67;
    a1.d = 68;

    a2: A;
    a2.a = 97;
    a2.b = 98;
    a2.c = 99;
    a2.d = 100;

    if (t) {
        return a1;
    }

    return a2;
}

fn main() {
    a1: A = foo(true);
    a2: A = foo(false);

    write_val(a1.a);
    write_val(a1.b);
    write_val(a1.c);
    write_val(a1.d);

    write_val(a2.a);
    write_val(a2.b);
    write_val(a2.c);
    write_val(a2.d);
}
