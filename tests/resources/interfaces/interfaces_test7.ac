
#if OS_GROUP_WINDOWS

native dllimport void* GetStdHandle(uint32 nStdHandle);

native dllimport int32 WriteFile(void*       hFile,
                                 const void* lpBuffer,
                                 uint32      nNumberOfBytesToWrite,
                                 uint32*     lpNumberOfBytesWritten,
                                 void*       lpOverlapped);

#elif OS_GROUP_UNIX

native isize write(int32 fd, const void* buf, usize count);

#endif

void write_val(int val) {

#if OS_GROUP_WINDOWS
    void* handle = GetStdHandle(-11);
    uint32 written;
    char c = as(char) val;
    WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    char c = as(char) val;
    write(1, &c, 1);
#endif

}

interface A {
    void foo();
}

struct B :: *A {
    int a;
    int b;

    void foo() {
        write_val(a);
        write_val(b);
    }
}

void main() {

    B[5] bs;
    bs[0].a = 65;
    bs[0].b = 66;
    bs[1].a = 65;
    bs[1].b = 66;
    bs[2].a = 65;
    bs[2].b = 66;
    bs[3].a = 65;
    bs[3].b = 66;
    bs[4].a = 65;
    bs[4].b = 66;

    A* a1 = &bs[0];
    A* a2 = &bs[0];
    A* a3 = &bs[0];
    A* a4 = &bs[0];
    A* a5 = &bs[0];

    a1.foo();
    a2.foo();
    a3.foo();
    a4.foo();
    a5.foo();

}