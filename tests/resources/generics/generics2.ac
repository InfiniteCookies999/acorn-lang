
#if OS_GROUP_WINDOWS

native dllimport void* GetStdHandle(uint32 nStdHandle);

native dllimport int32 WriteFile(void*       hFile,
                                 const void* lpBuffer,
                                 uint32      nNumberOfBytesToWrite,
                                 uint32*     lpNumberOfBytesWritten,
                                 void*       lpOverlapped);

#elif OS_GROUP_UNIX

native isize write(int32 fd, const void* buf, usize count);

#endif

void write_val(int val) {

#if OS_GROUP_WINDOWS
    void* handle = GetStdHandle(-11);
    uint32 written;
    char c = as(char) val;
    WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    char c = as(char) val;
    write(1, &c, 1);
#endif

}

generics[T]
T foo(T* a, T b) {
    return *a + b;
}

void main() {

    int a0 = 43;
    int* a1 = &a0;
    int v1 = foo(a1, 21);
    write_val(v1);

    // Use 0.5f since additions result in deterministic
    // behavior for IEEE floating points.
    float32 f0 = 0.5f;
    float32* f1 = &f0;
    float32 f = foo(f1, 0.5f);
    int v2 = (as(int) f) + 36;
    write_val(v2);

}