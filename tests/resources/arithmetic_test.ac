
#if OS_GROUP_WINDOWS

native dllimport fn GetStdHandle(nStdHandle: uint32) -> void*;

native dllimport fn WriteFile(hFile:                  void*,
                              lpBuffer:               const void*,
                              nNumberOfBytesToWrite:  uint32,
                              lpNumberOfBytesWritten: uint32*,
                              lpOverlapped:           void*
                              ) -> int32;

#elif OS_GROUP_UNIX

native fn write(fd: int32, buf: const void*, count: usize) -> isize;

#endif

fn write_val(val: int) {

#if OS_GROUP_WINDOWS
    handle: void* = GetStdHandle(-11);
    written: uint32;
    c: char = as(char) val;
    WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    c: char = as(char) val;
    write(1, &c, 1);
#endif

}

fn main() {
    {
        a: int = 52;
        b: int = 17;
        write_val(a + b);
    }
    {
        a: int = 120;
        b: int = 14;
        write_val(a - b);
    }
    {
        a: int = 3;
        b: int = 30;
        write_val(a * b);
    }
    {
        a: int = 486;
        b: int = 6;
        write_val(a / b);
    }
    {
        a: int = 52;
        b: int = 17;
        c: int = 10;
        write_val(a + b - c); // 59 -> ';'
    }
    {
        x: int = 100;
        y: int = 5;
        z: int = 25;
        write_val((x / y) + z); // 45 -> '-';
    }
    {
        p: int = 35;
        q: int = 7;
        r: int = 50;
        write_val(((p * q) - r) % 128); // 67 -> 'C'
    }
    {
        m: int = 80;
        n: int = 30;
        o: int = 5;
        write_val(((m + n) / o) + 33); // 55 -> '7'
    }
    {
        i: int = 42;
        j: int = 10;
        k: int = 5;
        write_val(((i + j) * k - 100) % 128); // 32 -> ' '
    }
    {
        x1: int = 50;
        y1: int = 3;
        z1: int = 10;
        write_val((x1 * y1 - z1 + 60) % 128); // 72 -> 'H'
    }
    {
        a1: int = 33;
        b1: int = 20;
        c1: int = 4;
        write_val(((a1 * b1) / c1 - 1) % 128); // 36 -> '$'
    }
}