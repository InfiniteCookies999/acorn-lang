import std;
import std.Error;

struct TestError :: *Error {
    const fn get_name() -> const char* {
        return "TestError";
    }
    const fn get_message() -> const char* {
        return "test error msg";
    }
}

fn write_val(val: int) {

#if OS_GROUP_WINDOWS
    handle: void* = std.GetStdHandle(-11);
    written: uint32;
    c: char = as(char) val;
    std.WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    c: char = as(char) val;
    std.write(1, &c, 1);
#endif

}

interface I {
    fn foo(b: bool, iv: int) | raises TestError;
}

struct A :: *I {
    v: int;

    fn foo(b: bool, iv: int) | raises TestError {
        if (b) {
            raise TestError{};
        }
        v = iv;
    }
}

fn main() {
    a: A;
    i: I* = &a;
    try (i.foo(false, 64));
    write_val(a.v);
    try (i.foo(true, 0));
}
