import std;
import std.Error;

struct TestError :: *Error {
    const char* get_name() const {
        return "TestError";
    }
    const char* get_message() const {
        return "test error msg";
    }
}

void write_val(int val) {

#if OS_GROUP_WINDOWS
    void* handle = std.GetStdHandle(-11);
    uint32 written;
    char c = as(char) val;
    std.WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    char c = as(char) val;
    std.write(1, &c, 1);
#endif

}

interface I {
    void foo(bool b, int iv) raises TestError;
}

struct A :: *I {
    int v;

    void foo(bool b, int iv) raises TestError {
        if b {
            raise TestError{};
        }
        v = iv;
    }
}

void main() {
    A a;
    I* i = &a;
    try i.foo(false, 64);
    write_val(a.v);
    try i.foo(true, 0);
}