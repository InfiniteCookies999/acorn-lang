import std;
import std.Error;

struct TestError :: *Error {
    const char* get_name() const {
        return "TestError";
    }
    const char* get_message() const {
        return "error raised!";
    }
}

void write_val(int val) {

#if OS_GROUP_WINDOWS
    void* handle = std.GetStdHandle(-11);
    uint32 written;
    char c = as(char) val;
    std.WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    char c = as(char) val;
    std.write(1, &c, 1);
#endif

}

struct B {
    int v;

    ~B() {
        std.print("B deconstructor called!");
    }
}

struct A {

    B f(bool b) raises TestError {
        if b {
            raise TestError{};
        } else {
            return B{ 64 };
        }
    }

    ~A() {
        std.print("A deconstructor called!");
    }
}

A foo() {
    return A{};
}

void bar(bool b) raises TestError {
    B b2 = try foo().f(b);
    write_val(b2.v);
}

void main() {
    try bar(false);
    std.print("...");
    try bar(true);
    std.print("end");
}