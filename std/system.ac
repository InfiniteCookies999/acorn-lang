#file(access=public)

import .win32;
import .unix;

#if OS_GROUP_UNIX
import .unix.Timespec;
#endif

/*
 * Stops the application from running and returns
 * the `exit_code` to the system.
 */
void exit(int exit_code) {
#if OS_GROUP_WINDOWS
    win32.ExitProcess(as(uint32) exit_code);
#elif OS_GROUP_UNIX
    unix._exit(as(int32) exit_code);
#endif
}

// Used to keep track of time.
private int64 performance_freq;

/*
 * Gets the current time in nanoseconds with high-resolution.
 * This function is designed for measuring elapsed time or intervals,
 * making it suitable for consistent timing mechanisms like profiling
 * or benchmarking.
 *
 * However, it is not appropriate for generating timestamps as it does
 * not return absolute time.
 */
int64 time_in_nanosecs() {
#if OS_GROUP_WINDOWS
    if performance_freq == 0 {
        win32.QueryPerformanceFrequency(&performance_freq);
    }
    int64 current;
    win32.QueryPerformanceCounter(&current);
    return as(int64) ((as(float64) (current * 1E+9) / performance_freq));
#elif OS_GROUP_UNIX
    Timespec ts;
    if unix.clock_gettime(unix.CLOCK_MONOTONIC, &ts) == 0 {
        return as(int64) (ts.tv_sec * 1E+9) + (as(int64) ts.tv_nsec);
    } else {
        raise StateError{ "Failed to get clock time" };
        return 0;
    }
#endif
}

/*
 * Gets the current time in milliseconds with high-resolution.
 * This function is designed for measuring elapsed time or intervals,
 * making it suitable for consistent timing mechanisms like profiling
 * or benchmarking.
 *
 * However, it is not appropriate for generating timestamps as it does
 * not return absolute time.
 */
int64 time_in_millisecs() {
    return time_in_nanosecs() / as(int64) 1e+6;
}

/*
 * Gets the system time since January 1, 1970, 00:00:00 (UTC).
 */
int64 sys_time_in_millisecs() {
#if OS_GROUP_WINDOWS

    // This represents the difference in the amount of 100-nanosecond intervals
    // between January 1, 1701 (UTC) and January 1, 1970 (UTC).
    const int64 WINDOWS_UNIX_TIME_DIFFERENCE = 116444736000000000;

    int64 time;
    win32.GetSystemTimeAsFileTime(&time);
    // Gives us time in 100-nanosecond intervals since January 1, 1701 (UTC)
    // but most languages and unix use seconds since January 1, 1970, 00:00:00 (UTC).
    //
    // So converting the timestamp for compatibility.
    // We subtract because it is the time since the given date so by removing the difference
    // it moves the time forward.
    //
    // Dividing by 10_000 instead of 1_000_000 because it is in 100-nanosecond intervals.
    //
    return (time - WINDOWS_UNIX_TIME_DIFFERENCE) / 10_000;
#elif OS_GROUP_UNIX
    // TODO: implement
    return 0;
#endif
}
