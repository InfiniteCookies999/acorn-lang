#file(access=public)

/*
 * A digit table that takes a digit and returns the corresponding
 * character within a base-64 range. This table may also work for
 * bases less than 64 bits.
 *
 * This table does not correspond to RFC-4648 because it is designed
 * designed to support easy conversions of standard base 10 and
 * base 16 characters.
 */
const char* DIGIT_TO_BASE64_TABLE = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz?=";

/*
 * Fills a buffer with the digits of the `value` in the given `base`.
 * This function does NOT null terminate the buffer.
 * 
 * 
 * @param value         the value whose digits fill the buffer.
 * @param end_of_buffer the pointer to the end of the pre-allocated.
 * @param base          the numeric base of the value.
 *
 * @return              the pointer to the start of the character string
 *                      containing the digits.
 */
char* uint64_to_chars(uint64 value, char* end_of_buffer, int base) {
    char* ptr = end_of_buffer;

    if value == 0 {
        *ptr = '0';
        return ptr;
    }

    uint64 b = as(uint64) base;
    loop value != 0 {
        uint64 digit = value % b;
        value /= b;

        *ptr = DIGIT_TO_BASE64_TABLE[digit];
        --ptr;
    }
    
    return ptr + 1;
}

/*
 * Converts the character to lowercase if the
 * character is uppercase.
 */
char tolower(char c) {
    return c >= 'A' && c <= 'Z' ? c + 32
                                : c;
}

/*
 * Converts the character to uppercase if
 * the character is lowercase.
 */
char toupper(char c) {
    return c >= 'a' && c <= 'z' ? c - 32
                                : c;
}
