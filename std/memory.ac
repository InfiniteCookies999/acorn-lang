#file(access=public)

generics(T)
fn exchange(value: T^, new_value: T) -> T {
    prev_value := moveobj(*value);
    *value = moveobj(new_value);
    return prev_value;
}

/*
 * Copies `count` amount of bytes from the `src`
 * to the `dest`.
 *
 * Warning: This is not a safe function. Use with caution.
 */
fn memcpy(dest: void*, src: const void*, count: int) {
    _memcpy(dest, src, as(usize) count);
}
private native("memcpy") fn _memcpy(dest: void*, src: const void*, count: usize);

/*
 * Copies `count` amount of bytes from the `src` to
 * the `dest` allowing for overlapping memory by creating
 * a temporary buffer.
 *
 * Warning: This is not a safe function. Use with caution.
 */
fn memmove(dest: void*, src: const void*, count: int) {
    _memmove(dest, src, as(usize) count);
}
private native("memmove") fn _memmove(dest: void*, src: const void*, count: usize);

/*
 * Sets `n` copies of the value to the dest.
 *
 * @param  n is the number of bytes and value is a byte value.
 *
 * Warning: This is not a safe function. Use with caution.
 */
fn memset(dest: void*, value: int8, n: int) {
    _memset(dest, value, as(usize) n);
}
private native("memset") fn _memset(dest: void*, value: int8, n: usize);

/*
 * Allocates memory on the heap. Allocates size number of bytes.
 */
fn malloc(size: int) -> void* {
    return _malloc(as(isize) size);
}
private native("malloc") fn _malloc(size: isize) -> void*;

/*
 * Compares two blocks of memory `mem1` and `mem2`.
 *
 * If they match returns 0.
 *
 * If the first non-equivalent character in `mem1` is larger than
 * the character in `mem2` returns +1.
 *
 * If the first non-equivalent character in `mem2` is larger than
 * the character in `mem1` returns -1.
 */
fn memcmp(mem1: const void*, mem2: const void*, n: int) -> int {
    return as(int) _memcmp(mem1, mem2, as(isize) n);
}

private native("memcmp") fn _memcmp(str1: const void*, str2: const void*, n: isize) -> int32;

/*
 * Given a pointer to memory on the heap this function frees up the
 * memory. Only pointers allocated with malloc should be passed
 * as an argument to this function.
 */
native fn free(ptr: void*);
