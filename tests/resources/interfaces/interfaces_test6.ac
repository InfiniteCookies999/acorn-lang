
#if OS_GROUP_WINDOWS

native dllimport fn GetStdHandle(nStdHandle: uint32) -> void*;

native dllimport fn WriteFile(hFile:                  void*,
                              lpBuffer:               const void*,
                              nNumberOfBytesToWrite:  uint32,
                              lpNumberOfBytesWritten: uint32*,
                              lpOverlapped:           void*
                              ) -> int32;

#elif OS_GROUP_UNIX

native fn write(fd: int32, buf: const void*, count: usize) -> isize;

#endif

fn write_val(val: int) {

#if OS_GROUP_WINDOWS
    handle: void* = GetStdHandle(-11);
    written: uint32;
    c: char = as(char) val;
    WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    c: char = as(char) val;
    write(1, &c, 1);
#endif

}

interface A {
    fn foo1();
    fn foo2();
}

interface B {
    fn bar1();
    fn bar2();
}

struct C :: *A, *B {
    a: int;
    b: int;
    c: int;
    d: int;

    fn foo1() {
        write_val(a);
    }

    fn foo2() {
        write_val(b);
    }

    fn bar1() {
        write_val(c);
    }

    fn bar2() {
        write_val(d);
    }
}

fn main() {

    c: C;
    c.a = 65;
    c.b = 66;
    c.c = 67;
    c.d = 68;

    a: A* = &c;
    a.foo1();
    a.foo2();

    b: B* = &c;
    b.bar1();
    b.bar2();

}