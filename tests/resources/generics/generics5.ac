
#if OS_GROUP_WINDOWS

native dllimport fn GetStdHandle(nStdHandle: uint32) -> void*;

native dllimport fn WriteFile(hFile:                  void*,
                              lpBuffer:               const void*,
                              nNumberOfBytesToWrite:  uint32,
                              lpNumberOfBytesWritten: uint32*,
                              lpOverlapped:           void*
                              ) -> int32;

#elif OS_GROUP_UNIX

native fn write(fd: int32, buf: const void*, count: usize) -> isize;

#endif

fn write_val(val: int) {

#if OS_GROUP_WINDOWS
    handle: void* = GetStdHandle(-11);
    written: uint32;
    c: char = as(char) val;
    WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    c: char = as(char) val;
    write(1, &c, 1);
#endif

}

generics[T]
fn foo(f: fn(T) -> T , v: T) -> T {
    return f(v);
}

fn bar1(v: int) -> int {
    return v + 4;
}

fn bar2(v: float) -> float {
    return v + 0.5f;
}

fn main() {

    r1: int = foo(bar1, 38);
    write_val(r1);

    // Use 0.5f since additions result in deterministic
    // behavior for IEEE floating points.
    r2: float = foo(bar2, 0.5f);
    r3: int = (as(int) r2) + 35;
    write_val(r3);

}
