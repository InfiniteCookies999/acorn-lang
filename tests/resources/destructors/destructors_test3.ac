
#if OS_GROUP_WINDOWS

native dllimport void* GetStdHandle(uint32 nStdHandle);

native dllimport int32 WriteFile(void*       hFile,
                                 const void* lpBuffer,
                                 uint32      nNumberOfBytesToWrite,
                                 uint32*     lpNumberOfBytesWritten,
                                 void*       lpOverlapped);

#elif OS_GROUP_UNIX

native isize write(int32 fd, const void* buf, usize count);

#endif

void print(const char* s, int length) {
#if OS_GROUP_WINDOWS
    void* handle = GetStdHandle(-11);
    uint32 written;
    WriteFile(handle, s, as(uint32) length, &written, null);
#elif OS_GROUP_UNIX
    write(1, s, as(usize) length);
#endif
}

struct A {
    ~A() {
        print("calledA ", 8);
    }
}

struct B {
    ~B() {
        print("calledB ", 8);
    }
}

struct C {
    ~C() {
        print("calledC ", 8);
    }
}

void foo(bool b) {
    A aa;

    if b {
        B bb;
        return;
    }

    C cc;
}

void main() {
    foo(true);
    foo(false);
}