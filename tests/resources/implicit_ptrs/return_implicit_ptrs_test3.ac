
#if OS_GROUP_WINDOWS

native dllimport fn GetStdHandle(nStdHandle: uint32) -> void*;

native dllimport fn WriteFile(hFile:                  void*,
                              lpBuffer:               const void*,
                              nNumberOfBytesToWrite:  uint32,
                              lpNumberOfBytesWritten: uint32*,
                              lpOverlapped:           void*
                              ) -> int32;

#elif OS_GROUP_UNIX

native fn write(fd: int32, buf: const void*, count: usize) -> isize;

#endif

fn write_val(val: int64) {

#if OS_GROUP_WINDOWS
    handle: void* = GetStdHandle(-11);
    written: uint32;
    c: char = as(char) val;
    WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    c: char = as(char) val;
    write(1, &c, 1);
#endif

}

struct A {
    v1: int64;
    v2: int64;
    v3: int64;
    v4: int64;
}

fn foo(a: A*) -> A^ {
    return a;
}

fn main() {
    o: A = A{ 65, 66, 67, 68 };
    a1: A = foo(&o);
    write_val(a1.v1);
    write_val(a1.v2);
    write_val(a1.v3);
    write_val(a1.v4);
    a2: A* = foo(&o);
    write_val(a2.v1);
    write_val(a2.v2);
    write_val(a2.v3);
    write_val(a2.v4);
    a3: A;
    a3 = foo(&o);
    write_val(a3.v1);
    write_val(a3.v2);
    write_val(a3.v3);
    write_val(a3.v4);
}