#file(access=public)

import .win32;
import .unix;
import .reflect.Any;
import .reflect.Type;
import .reflect.StructTypeInfo;
import .reflect.EnumTypeInfo;
import .reflect.TypeId;

fn print(s: const char*, length: int) {
#if OS_GROUP_WINDOWS
    handle: void* = win32.GetStdHandle(-11);
    num_written: uint32;
    win32.WriteFile(handle, s, as(uint32) length, &num_written, null);
#elif OS_GROUP_UNIX
    unix.write(1, s, as(usize) length);
#endif
}

fn print(s: const char*) {
    print(s, strlen(s));
}

fn print(s: const String^) {
    print(s.buffer, s.length);
}

fn print(value: int, base := 10) {
    if value < 0 {
        print("-");
        value = -value;
    }

    print(as(uint64) value, base);
}

fn print(value: uint64, base := 10) {

    BUFFER_SIZE :: 21;
    buffer: char[BUFFER_SIZE] = ---;
    ptr := uint64_to_chars(value, buffer + BUFFER_SIZE - 1, base);

    length := as(int) ((buffer + BUFFER_SIZE) - ptr);
    print(ptr, length);
}

fn print(value: int64, base := 10) {
    if value < 0 {
        print('-');
        value = -value;
    }

    print(as(uint64) value, base);
}

fn print(c: char) {
    print(&c, 1);
}

fn print(b: bool) {
    if b {
        print("true", 4);
    } else {
        print("false", 5);
    }
}

fn print(value: Any) {
    print_any(value.ptr, value.type);
}

fn print(fmt: const char*, args: Any...) {
    arg_index := 0;
    loop ptr := fmt; *ptr != '\0'; {
        if *ptr == '%' && *(ptr+1) == 's' {
            ptr += 2;
            arg: Any = args[arg_index++];
            print(arg);
        } else {
            print(*ptr);
            ++ptr;
        }
    }
}

fn print(ptr: const void*) {

    BUFFER_SIZE :: sizeof(void*) * 2 + 2;
    buffer: char[BUFFER_SIZE] = ---;

    buffer_end := buffer + buffer.length - 1;
    int_ptr_start := uint64_to_chars(as(uint64) ptr, buffer_end, base=16);

    zeros_length := as(int) (int_ptr_start - as(const char*) buffer);
    memset(buffer, '0', zeros_length);
    buffer[1] = 'x';

    print(buffer, buffer.length);

}

private fn print_any(ptr: const void*, type: const Type*) {
    switch type.id {
    case Int:     print(as(int64)  *as(const int*)    ptr);
    case Int8:    print(as(int64)  *as(const int8*)   ptr);
    case Int16:   print(as(int64)  *as(const int16*)  ptr);
    case Int32:   print(as(int64)  *as(const int32*)  ptr);
    case Int64:   print(as(int64)  *as(const int64*)  ptr);
    case ISize:   print(as(int64)  *as(const isize*)  ptr);
    case UInt8:   print(as(uint64) *as(const uint8*)  ptr);
    case UInt16:  print(as(uint64) *as(const uint16*) ptr);
    case UInt32:  print(as(uint64) *as(const uint32*) ptr);
    case UInt64:  print(as(uint64) *as(const uint64*) ptr);
    case USize:   print(as(uint64) *as(const usize*)  ptr);
    case Char:    print(*as(const char*) ptr);
    // Just print out the numeric value of the characters.
    case Char16:  print(as(uint64) *as(const char16*) ptr);
    // TODO: case Float32: case Float64:
    case Bool:    print(*as(const bool*) ptr);
    case Pointer:
        if type.elm_type.id == TypeId.Char {
            print(*as(const (const char*)*) ptr);
        } elif type.elm_type == #type_info(String) {
            print(*as(const (const String*)*) ptr);
        } else {
            print(*as(const (const void*)*) ptr);
        }
    case Function: print(*as(const (const void*)*) ptr);
    case Struct:
        if type == #type_info(String) {
            print(as(const String*) ptr);
        } else {
            print_struct(ptr, type.struct_info);
        }
    case Slice:

        length := *as(const int*)(ptr + sizeof(void*));
        elements := *as(const (const void*)*) ptr;

        print_array_like_value(elements, type.elm_type, length);

    case Array: print_array_like_value(ptr, type.elm_type, type.array_length);
    case Enum:  print_enum(ptr, type.enum_info);
    }
}

private fn print_array_like_value(array: const void*, elm_type: const Type*, length: int) {
    print('[');

    elm_byte_size: int = elm_type.size_in_bytes;
    loop i in 0..<length {
        offset_into_array: const void* = array + (i * elm_byte_size);

        if elm_type.is_string()  print('"');
        print_any(offset_into_array, elm_type);
        if elm_type.is_string()  print('"');

        if i+1 != length {
            print(", ");
        }
    }

    print(']');
}

private fn print_struct(ptr: const void*, struct_info: const StructTypeInfo*) {
    print(struct_info.name);
    print("{ ");

    loop i in 0..<struct_info.num_fields {
        field_info := struct_info.fields + i;
        print(field_info.name);
        print("=");

        field_data: const void* = ptr + field_info.offset_in_bytes;

        if field_info.type.is_string()  print('"');
        print_any(field_data, field_info.type);
        if field_info.type.is_string()  print('"');

        if i+1 != struct_info.num_fields {
            print(", ");
        }
    }

    print(" }");
}

private fn print_enum(ptr: const void*, enum_info: const EnumTypeInfo*) {
    index: uint64;
    switch enum_info.index_type.id {
    case Int:     index = as(uint64) *as(const int*)    ptr;
    case Int8:    index = as(uint64) *as(const int8*)   ptr;
    case Int16:   index = as(uint64) *as(const int16*)  ptr;
    case Int32:   index = as(uint64) *as(const int32*)  ptr;
    case Int64:   index = as(uint64) *as(const int64*)  ptr;
    case ISize:   index = as(uint64) *as(const isize*)  ptr;
    case UInt8:   index = as(uint64) *as(const uint8*)  ptr;
    case UInt16:  index = as(uint64) *as(const uint16*) ptr;
    case UInt32:  index = as(uint64) *as(const uint32*) ptr;
    case UInt64:  index = as(uint64) *as(const uint64*) ptr;
    case USize:   index = as(uint64) *as(const usize*)  ptr;
    case Char:    index = as(uint64) *as(const char*)   ptr;
    case Char16:  index = as(uint64) *as(const char16*) ptr;
    }

    name := enum_info.get_value_name(index);
    print(name);
}

// -- println functions
//

fn println(ptr: const void*) {
    print(ptr);
    print("\n");
}

fn println(s: const char*) {
    print(s);
    print("\n");
}

fn println(value: int, base := 10) {
    print(value, base);
    print("\n");
}

fn println(value: uint64, base := 10) {
    print(value, base);
    print("\n");
}

fn println(value: int64, base := 10) {
    print(value, base);
    print("\n");
}

fn println(c: char) {
    print(c);
    print("\n");
}

fn println(b: bool) {
    print(b);
    print("\n");
}

fn println(s: const String^) {
    print(s);
    print("\n");
}

fn println(any: Any) {
    print(any);
    print("\n");
}

fn println(fmt: const char*, args: Any...) {
    print(fmt, args);
    print("\n");
}