
#if OS_GROUP_WINDOWS

native dllimport fn GetStdHandle(nStdHandle: uint32) -> void*;

native dllimport fn WriteFile(hFile:                  void*,
                              lpBuffer:               const void*,
                              nNumberOfBytesToWrite:  uint32,
                              lpNumberOfBytesWritten: uint32*,
                              lpOverlapped:           void*
                              ) -> int32;

#elif OS_GROUP_UNIX

native fn write(fd: int32, buf: const void*, count: usize) -> isize;

#endif

fn print(s: const char*, length: int) {
#if OS_GROUP_WINDOWS
    handle: void* = GetStdHandle(-11);
    written: uint32;
    WriteFile(handle, s, as(uint32) length, &written, null);
#elif OS_GROUP_UNIX
    write(1, s, as(usize) length);
#endif
}

fn write_val(val: int64) {

#if OS_GROUP_WINDOWS
    handle: void* = GetStdHandle(-11);
    written: uint32;
    c: char = as(char) val;
    WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    c: char = as(char) val;
    write(1, &c, 1);
#endif

}

struct A {
    v1: int64 = 65;
    v2: int64 = 66;
    v3: int64 = 67;
    v4: int64 = 68;

    fn delete() {
        print("called", 6);
        v1 = 35;
        v1 = 36;
        v1 = 37;
        v1 = 38;
    }
}

fn foo(t: bool) -> A {
    a: A;

    if (t) {
        return a;
    }

    return A{};
}

fn main() {
    a1: A = foo(true);
    write_val(a1.v1);
    write_val(a1.v2);
    write_val(a1.v3);
    write_val(a1.v4);
    a2: A = foo(false);
    write_val(a2.v1);
    write_val(a2.v2);
    write_val(a2.v3);
    write_val(a2.v4);
}
