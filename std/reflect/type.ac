#file(access=public, namespace=reflect)

/*
 * Represents the kind of a Type in acorn.
 */
enum TypeId {

    INT,

    INT8,
    INT16,
    INT32,
    INT64,
    ISIZE,

    UINT8,
    UINT16,
    UINT32,
    UINT64,
    USIZE,

    CHAR,
    CHAR16,

    FLOAT,
    DOUBLE,

    VOID,
    BOOL,
    FUNCS_REF,      // A reference to an identifier to overloaded functions.
    NAMESPACE_REF,  // A reference to an identifier to a namespace.
    POINTER,
    ARRAY,
    SLICE,
    EMPTY_ARRAY,
    UNRESOLVED_ARRAY, // Length could not be resolved during parsing.
    NULL,
    ASSIGN_DETERMINED_ARRAY,
    FUNCTION,
    UNRESOLVED_COMPOSITE,
    UNRESOLVED_GENERIC_COMPOSITE,
    STRUCT,
    ENUM,
    UNRESOLVED_ENUM_VALUE_TYPE,
    INTERFACE,
    ENUM_CONTAINER,
    RANGE,
    AUTO,
    EXPR, // A type that appears as part of an expression in code.
    GENERIC,
    INDETERMINATE,
    PARTIALLY_BOUND_STRUCT,
    INVALID,

}

struct FieldTypeInfo {
    name:            const char*;
    type:            const Type*;
    offset_in_bytes: int;
}

struct StructTypeInfo {
    name:       const char*;
    num_fields: int;
    fields:     const FieldTypeInfo*;
}

struct EnumTypeInfo {
    num_values:         int;
    index_mapping_mask: uint64;
    index_mappings:     uint64[2]*;
    value_names:        const char**;
    index_type:         const Type*;

    const fn get_enum_offset(index: uint64) -> uint64 {

        // Linear probe over the hashed values to find the
        // actual offset that the index refers to in the enum.
        hash: uint64 = index & index_mapping_mask;
        bucket_index: uint64 = hash;

        loop {
            bucket: const uint64[2]* = index_mappings + bucket_index;
            if ((*bucket)[0] == index) {
                // Still have to check for -1 because it is possible the user wanted
                // to store a -1 index value in the enum and -1 is used for empty keys.
                if ((*bucket)[1] != -1) {
                    return (*bucket)[1];
                }
            }

            ++bucket_index;
            bucket_index &= index_mapping_mask;
        }

        return 0;
    }

    const fn get_value_name(index: uint64) -> const char* {
        offset: uint64 = get_enum_offset(index);
        return value_names[offset];
    }
}

struct Type {

    id:            TypeId;
    size_in_bytes: int;

    // Element type of pointers, arrays, and slices.
    elm_type:      const Type*;
    // If the type is an array this is the length.
    array_length:  int;
    struct_info:   const StructTypeInfo*;
    enum_info:     const EnumTypeInfo*;

    const fn is_integer() -> bool {
        return id <= TypeId.USIZE;
    }

    const fn is_number() -> bool {
        return is_integer() || id == TypeId.FLOAT || id == TypeId.DOUBLE;
    }

    const fn is_signed() -> bool {
        return id <= TypeId.ISIZE;
    }

    const fn is_any_pointer() -> bool {
        return id == TypeId.POINTER || id == TypeId.FUNCTION || id == TypeId.NULL;
    }

    const fn is_string() -> bool {
        if (id == TypeId.POINTER) {
            return elm_type.id == TypeId.CHAR;
        } elif (id == TypeId.STRUCT) {
            return this == #type_info(String);
        } else {
            return false;
        }
    }
}