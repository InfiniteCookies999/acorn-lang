import std;
import std.Error;

struct TestError :: *Error {
    const char* get_name() const {
        return "TestError";
    }
    const char* get_message() const {
        return "error raised!";
    }
}

void write_val(int64 val) {

#if OS_GROUP_WINDOWS
    void* handle = std.GetStdHandle(-11);
    uint32 written;
    char c = as(char) val;
    std.WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    char c = as(char) val;
    std.write(1, &c, 1);
#endif

}

struct A {
    int64 v1;
    int64 v2;
    int64 v3;
    int64 v4;
}

A foo(bool b) raises TestError {
    if b {
        raise TestError{};
    } else {
        return A{ 65, 66, 67, 68 };
    }
}

void main() {
    A a1 = try foo(false) {
        std.print("I am not called");
        return;
    };

    write_val(a1.v1);
    write_val(a1.v2);
    write_val(a1.v3);
    write_val(a1.v4);

    A a2 = try foo(true) {
        std.print("error caught!");
        return;
    };

    std.print("I am not reached");
}