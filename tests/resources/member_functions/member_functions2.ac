
#if OS_GROUP_WINDOWS

native dllimport fn GetStdHandle(nStdHandle: uint32) -> void*;

native dllimport fn WriteFile(hFile:                  void*,
                              lpBuffer:               const void*,
                              nNumberOfBytesToWrite:  uint32,
                              lpNumberOfBytesWritten: uint32*,
                              lpOverlapped:           void*
                              ) -> int32;

#elif OS_GROUP_UNIX

native fn write(fd: int32, buf: const void*, count: usize) -> isize;

#endif

fn write_val(val: int32) {

#if OS_GROUP_WINDOWS
    handle: void* = GetStdHandle(-11);
    written: uint32;
    c: char = as(char) val;
    WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    c: char = as(char) val;
    write(1, &c, 1);
#endif

}

struct A {
    v: int;

    fn foo() -> int32[8] {
        a: int32[8] = [ 76, 101, 116, 115, 32, 103, 111, 33 ];
        return a;
    }
}

fn main() {
    a: A;
    arr: int32[8] = a.foo();

    write_val(arr[0]);
    write_val(arr[1]);
    write_val(arr[2]);
    write_val(arr[3]);
    write_val(arr[4]);
    write_val(arr[5]);
    write_val(arr[6]);
    write_val(arr[7]);
}