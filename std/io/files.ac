#file(access=public, namespace=io)

import .. module;
import .win32;
import .unix;
import .String;
import .IOError;

#if OS_GROUP_UNIX
import .unix.Stat;
#endif

// TODO: We want to a flag to not truncate when writing.

/*
 * Flags that indicate how to open a file for
 * reading and writing.
 */

enum FileFlag :: uint32 {

    /*
     * Read from the file.
     */
    IN  = 0x0001,

    /*
     * Write to the file.
     */
    OUT = 0x0002,

    /*
    * More than once open instance of the
    * file can be opened and accessed at
    * the same time.
    */
    SHARE = 0x0004,

    /*
     * Creates the file if it does not exist.
     *
     * The default behavior is to override the
     * file it it exists. If you wish to append
     * to an existing file use `APPEND`.
     */
    CREATE = 0x0008,

    /*
     * Will append to an existing file or may be used
     * in conjunction with CREATE to create the file
     * if it does not exist and append to the new file.
     */
    APPEND = 0x0010

}

// TODO: We need to fix the file handle to work with
//       large files?
struct FileHandle :: Writable, Readable {

#if OS_GROUP_WINDOWS
    handle: void*;
#elif OS_GROUP_UNIX
    handle: int32;
#endif

    auto_close: bool;

#if OS_GROUP_WINDOWS
    fn new(handle: void*, auto_close := true) {
        this.handle     #= handle;
        this.auto_close #= auto_close;
    }
#elif OS_GROUP_UNIX
    fn new(handle: int32, auto_close := true) {
        this.handle     #= handle;
        this.auto_close #= auto_close;
    }
#endif

    fn moveobj(file_handle: FileHandle*) {
        this.handle     #= file_handle.handle;
        this.auto_close #= file_handle.auto_close;

#if OS_GROUP_WINDOWS
        file_handle.handle = null;
#elif OS_GROUP_UNIX
        file_handle.handle = 0;
#endif
        file_handle.auto_close = false;
    }

    const fn get_size() -> int {
        // TODO: eventually it would be nice if the functionality of this
        // worked with larger file sizes. However, there are some limitations
        // to overcome when working with larger memory. One of those limitations
        // is simply malloc. If the user wants to allocate a buffer larger than
        // 32 bytes on some systems with malloc it would fail. Additionally the
        // read_buffer function would require additional consideration to allow
        // reading in such large amounts of data.
        //
        // Then there is the additional question of if this should be directly
        // supported or if the user should be forced to buffer the data, a more
        // sensable approach when working with such large memory.

        // TODO: error handling!
#if OS_GROUP_WINDOWS
        size: uint32 = win32.GetFileSize(handle, null);
        return as(int) size;
#elif OS_GROUP_UNIX
        stats: Stat;
        if (unix.fstat(handle, &stats) == 0) {
            return as(int) stats.st_size;
        }
        return 0;
#endif
    }

    fn read_buffer(buffer: char*, length: int) -> int | raises IOError {
#if OS_GROUP_WINDOWS
        bytes_read: uint32;
        if (win32.ReadFile(handle, buffer, as(uint32) length, &bytes_read, null) == 0) {
            raise IOError{ "Failed to read from file handle" };
        }
        return as(int) bytes_read;
#elif OS_GROUP_UNIX
        bytes_read: isize = unix.read(handle, buffer, as(usize) length);
        if (bytes_read == -1) {
            raise IOError{ "Failed to read from file handle" };
        }
        return as(int) bytes_read;
#endif
    }

    fn write_buffer(buffer: const char*, length: int) -> int | raises IOError {
#if OS_GROUP_WINDOWS
        bytes_written: uint32;
        if (win32.WriteFile(handle, buffer, as(uint32) length, &bytes_written, null) == 0) {
            raise IOError{ "Failed to write to file handle" };
        }
        return as(int) bytes_written;
#elif OS_GROUP_UNIX
        bytes_written: isize = unix.write(handle, buffer, as(usize) length);
        if (bytes_written == -1) {
            raise IOError{ "Failed to write to file handle" };
        }
        return as(int) bytes_written;
#endif
    }

    fn delete() {
        if (auto_close) {
            close();
        }
    }

    fn close() {
#if OS_GROUP_WINDOWS
        win32.CloseHandle(handle);
#elif OS_GROUP_UNIX
        unix.close(handle);
#endif
    }
}

/*
 * Reads an entire file into a `String`.
 */
fn read_file(path: const char*) -> String | raises IOError {
    handle := try (open_file(path, FileFlag.IN | FileFlag.SHARE));

    size := handle.get_size();

    buffer := as(char*) module.malloc(size + 1); // +1 for null terminator.
    bytes_read := try err: (handle.read_buffer(buffer, size)) {
        raise IOError{ module.format("Reading file \"%s\": %s", path, err.get_message()) };
    };

    if (bytes_read != size) {
        raise IOError{ module.format("Failed to read all bytes of file: \"%s\"", path) };
    }

    buffer[size] = '\0'; // Adding null terminator.
    return String{ buffer, size, copy_buffer=false };
}

/*
 * Reads an entire file into a `String`.
 */
fn read_file(path: const String^) -> String | raises IOError {
    contents := try (read_file(path.buffer));
    return contents;
}

/*
 * Returns true if the file system has a file or
 * directory at the given path.
 */
fn path_exists(path: const char*) -> bool {
#if OS_GROUP_WINDOWS
    attribs: uint32 = win32.GetFileAttributesA(path);
    return attribs != win32.INVALID_FILE_ATTRIBUTES;
#elif OS_GROUP_UNIX
    return unix.access(path, unix.F_OK) == 0;
#endif
}

/*
 * Returns true if the file system has a file or
 * directory at the given path.
 */
fn path_exists(path: const String^) -> bool {
    return path_exists(path.buffer);
}

/*
 * Returns true if the file system has a file but
 * is not a directory at the given path.
 */
fn file_exists(path: const char*) -> bool {
#if OS_GROUP_WINDOWS
    attribs: uint32 = win32.GetFileAttributesA(path);
    return attribs != win32.INVALID_FILE_ATTRIBUTES &&
          (attribs &  win32.FILE_ATTRIBUTE_DIRECTORY) == 0;
#elif OS_GROUP_UNIX
    stats: Stat;
    if (unix.stat(path, &stats) == 0) {
        return !unix.__S_ISTYPE(stats.st_mode, unix.__S_IFDIR);
    }
    return false;
#endif
}

/*
 * Returns true if the file system has a file but
 * is not a directory at the given path.
 */
fn file_exists(path: const String^) -> bool {
    return file_exists(path.buffer);
}

/*
 * Returns true if the file system has a directory
 * at the given path.
 */
fn directory_exists(path: const char*) -> bool {
#if OS_GROUP_WINDOWS
    attribs: uint32 = win32.GetFileAttributesA(path);
    return attribs != win32.INVALID_FILE_ATTRIBUTES &&
          (attribs &  win32.FILE_ATTRIBUTE_DIRECTORY) != 0;
#elif OS_GROUP_UNIX
    stats: Stat;
    if (unix.stat(path, &stats) == 0) {
        return unix.__S_ISTYPE(stats.st_mode, unix.__S_IFDIR);
    }
    return false;
#endif
}

/*
 * Returns true if the file system has a directory
 * at the given path.
 */
fn directory_exists(path: const String^) -> bool {
    return directory_exists(path.buffer);
}

/*
 * Creates the directory at the given path. Returns
 * true if created.
 */
fn mkdir(path: const char*) -> bool {
    // TODO: improve the return to indicate why it failed
    //       besides just a bool for if is succeeded or not.
    // TODO: We will also want to pass a variable for creating
    //       the parent directories if the user wants.

#if OS_GROUP_WINDOWS
    return win32.CreateDirectoryA(path, null) != 0;
#elif OS_GROUP_UNIX
    return unix.mkdir(path, 0775) == 0;
#endif
}

/*
 * Creates the directory at the given path. Returns
 * true if created.
 */
fn mkdir(path: const String^) -> bool {
    return mkdir(path.buffer);
}

/*
 * Deletes the file or directory if it exists.
 * Returns true if it succeeded.
 *
 * If deleting a directory the directory must be
 * empty.
 */
fn remove_path(path: const char*) -> bool {

#if OS_GROUP_WINDOWS
    attribs: uint32 = win32.GetFileAttributesA(path);
    if (attribs == win32.INVALID_FILE_ATTRIBUTES) {
        return false;
    }
    if ((attribs & win32.FILE_ATTRIBUTE_DIRECTORY) != 0) {
        return win32.RemoveDirectoryA(path) != 0;
    }
    return win32.DeleteFileA(path) != 0;
#elif OS_GROUP_UNIX
    return unix.remove(path) == 0;
#endif
}

/*
 * Deletes the file or directory if it exists.
 * Returns true if it succeeded.
 *
 * If deleting a directory the directory must be
 * empty.
 */
fn remove_path(path: const String^) -> bool {
    return remove_path(path.buffer);
}

fn open_file(path: const char*, flags: FileFlag$) -> FileHandle | raises IOError {

#if OS_GROUP_WINDOWS
    access_flags: uint32 = 0;
    share_flags:  uint32 = 0;
    create_flags: uint32 = 0;

    if (flags == 0) {
        access_flags = win32.GENERIC_ALL;
    }

    if ((flags & FileFlag.IN) != 0) {
        access_flags |= win32.GENERIC_READ;
    }

    if ((flags & FileFlag.APPEND) != 0) {
        access_flags |= win32.FILE_APPEND_DATA;
    } elif ((flags & FileFlag.OUT) != 0) {
        access_flags |= win32.GENERIC_WRITE;
    }

    if ((flags & FileFlag.SHARE) != 0) {
        share_flags |= win32.FILE_SHARE_READ;
    }

    if ((flags & FileFlag.CREATE) != 0) {
        if ((flags & FileFlag.APPEND) != 0) {
            create_flags |= win32.OPEN_ALWAYS;
        } else {
            // Windows is weird and none of the create options allow us to simply
            // overwrite the old file. We will simply remove the existing file if
            // it exists then create a new one.
            remove_path(path); // TODO: should this report an error if it fails?
            create_flags |= win32.CREATE_NEW;
        }
    } else {
        create_flags |= win32.OPEN_EXISTING;
    }

    handle: void* = win32.CreateFileA(path,
                                      access_flags,
                                      share_flags,
                                      null,
                                      create_flags,
                                      win32.FILE_ATTRIBUTE_NORMAL,
                                      null);

    if (handle == win32.INVALID_HANDLE_VALUE) {
        raise IOError{ module.format("Failed to open file: \"%s\"", path) };
    }

    return FileHandle{ handle };
#elif OS_GROUP_UNIX

    // TODO: O_LARGEFILE -- Allow working for large file sizes.

    os_flags: int32 = 0;
    os_mode: uint32 = 0;

    if ((flags & FileFlag.IN) != 0 && (flags & FileFlag.OUT) != 0) {
        os_flags |= unix.O_RDWR;
    } elif ((flags & FileFlag.IN) != 0) {
        os_flags |= unix.O_RDONLY;
    } elif ((flags & FileFlag.OUT) != 0) {
        os_flags |= unix.O_WRONLY;
    }

    if ((flags & FileFlag.APPEND) != 0) {
        os_flags |= unix.O_APPEND;
    } else {
        os_flags |= unix.O_TRUNC;
    }

    if ((flags & FileFlag.CREATE) != 0) {
        os_flags |= unix.O_CREAT;
        // 0666
        os_mode = unix.S_IRUSR | unix.S_IWUSR | unix.S_IRGRP |
                  unix.S_IWGRP | unix.S_IROTH | unix.S_IWOTH;
    }

    handle: int32 = unix.open(path, os_flags, os_mode);
    if (handle == -1) {
        raise IOError{ module.format("Failed to open file: \"%s\"", path) };
    }

    return FileHandle{ handle };
#endif
}

fn open_file(path: const String^, flags: FileFlag$) -> FileHandle | raises IOError {
    handle := try (open_file(path.buffer, flags));
    return handle;
}
