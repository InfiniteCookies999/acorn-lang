import std;
import std.Error;

struct TestError :: *Error {
    const fn get_name() -> const char* {
        return "TestError";
    }
    const fn get_message() -> const char* {
        return "error raised!";
    }
}

fn write_val(val: int) {

#if OS_GROUP_WINDOWS
    handle: void* = std.GetStdHandle(-11);
    written: uint32;
    c: char = as(char) val;
    std.WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    c: char = as(char) val;
    std.write(1, &c, 1);
#endif

}

struct A {
    v: int8;
    fn delete() {
        std.print("deconstructor called!");
    }
}

fn foo(b: bool) -> A | raises TestError {
    if b {
        raise TestError{};
    } else {
        return A{ 64 };
    }
}

fn main() {
    a1: A = try foo(false) {
        return;
    };
    std.print("...");
    a2: A = try foo(true) {
        std.print("caught error!");
        return;
    };
    std.print("not reached");
}