#file(access=public, namespace=files)

import .. module;
import .win32;
import .unix;
import .String;

#if OS_GROUP_UNIX
import .unix.Stat;
#endif

// TODO: We want to a flag to not truncate when writing.

/*
 * Flags that indicate how to open a file for
 * reading and writing.
 */

enum FileFlag :: uint32 {

    /*
     * Read from the file.
     */
    IN  = 0x0001,

    /*
     * Write to the file.
     */
    OUT = 0x0002,

    /*
    * More than once open instance of the
    * file can be opened and accessed at
    * the same time.
    */
    SHARE = 0x0004,

    /*
     * Creates the file if it does not exist.
     *
     * The default behavior is to override the
     * file it it exists. If you wish to append
     * to an existing file use `APPEND`.
     */
    CREATE = 0x0008,

    /*
     * Will append to an existing file or may be used
     * in conjunction with CREATE to create the file
     * if it does not exist and append to the new file.
     */
    APPEND = 0x0010

}

// TODO: We need to fix the file handle to work with
//       large files?
struct FileHandle {

#if OS_GROUP_WINDOWS
    void* handle;
#elif OS_GROUP_UNIX
    int32 handle;
#endif

    bool auto_close;

#if OS_GROUP_WINDOWS
    FileHandle(void* handle, bool auto_close = true) {
        this.handle = handle;
        this.auto_close = auto_close;
    }
#elif OS_GROUP_UNIX
    FileHandle(int32 handle, bool auto_close = true) {
        this.handle = handle;
        this.auto_close = auto_close;
    }
#endif

    moveobj FileHandle(FileHandle* file_handle) {
        this.handle     = file_handle.handle;
        this.auto_close = file_handle.auto_close;

#if OS_GROUP_WINDOWS
        file_handle.handle = null;
#elif OS_GROUP_UNIX
        file_handle.handle = 0;
#endif
        file_handle.auto_close = false;
    }

    int get_size() {
        // TODO: eventually it would be nice if the functionality of this
        // worked with larger file sizes. However, there are some limitations
        // to overcome when working with larger memory. One of those limitations
        // is simply malloc. If the user wants to allocate a buffer larger than
        // 32 bytes on some systems with malloc it would fail. Additionally the
        // read_buffer function would require additional consideration to allow
        // reading in such large amounts of data.
        //
        // Then there is the additional question of if this should be directly
        // supported or if the user should be forced to buffer the data, a more
        // sensable approach when working with such large memory.

        // TODO: error handling!
#if OS_GROUP_WINDOWS
        uint32 size = win32.GetFileSize(handle, null);
        return as(int) size;
#elif OS_GROUP_UNIX
        Stat stats;
        if unix.fstat(handle, &stats) == 0 {
            return as(int) stats.st_size;
        }
        return 0;
#endif
    }

    int read_buffer(char* buffer, int length) {
#if OS_GROUP_WINDOWS
        uint32 bytes_read;
        if win32.ReadFile(handle, buffer, as(uint32) length, &bytes_read, null) == 0 {
            // TODO: proper error handling.
            module.println("failed to read buffer of file :(");
            return 0;
        }
        return as(int) bytes_read;
#elif OS_GROUP_UNIX
        isize bytes_read = unix.read(handle, buffer, as(usize) length);
        if bytes_read == -1 {
            module.println("failed to read buffer of file :(");
            return 0;
        }
        return as(int) bytes_read;
#endif
    }

    int write_buffer(const char* buffer, int length) {
#if OS_GROUP_WINDOWS
        uint32 bytes_written;
        if win32.WriteFile(handle, buffer, as(uint32) length, &bytes_written, null) == 0 {
            module.println("failed to write to file handle :(");
            return 0;
        }
        return as(int) bytes_written;
#elif OS_GROUP_UNIX
        isize bytes_written = unix.write(handle, buffer, as(usize) length);
        if bytes_written == -1 {
            module.println("failed to write to file handle :(");
            return 0;
        }
        return as(int) bytes_written;
#endif
    }

    ~FileHandle() {
        if auto_close {
            close();
        }
    }

    void close() {
#if OS_GROUP_WINDOWS
        win32.CloseHandle(handle);
#elif OS_GROUP_UNIX
        unix.close(handle);
#endif
    }
}

/*
 * Reads an entire file into a string.
 */
String read(const char* path) {
    auto handle = open(path, FileFlag.IN | FileFlag.SHARE);

// TODO: eventually when we have proper error handling this should
//       not be needed.
#if OS_GROUP_WINDOWS
    if !handle.handle {
        return String{ "" };
    }
#elif OS_GROUP_UNIX
    if handle.handle == -1 {
        return String{ "" };
    }
#endif

    int size = handle.get_size();

    char* buffer = as(char*) module.malloc(size + 1); // +1 for null terminator.
    int bytes_read = handle.read_buffer(buffer, size);

    if bytes_read != size {
        // TODO: proper error handling.
        module.println("Read the incorrect number of bytes from file :(");
        return String{ "" };
    }

    buffer[size] = '\0'; // Adding null terminator.
    return String{ buffer, size, copy_buffer=false };
}

/*
 * Reads an entire file into a string.
 */
String read(const String^ path) {
    return read(path.buffer);
}

/*
 * Returns true if the file system has a file or
 * directory at the given path.
 */
bool exists(const char* path) {
#if OS_GROUP_WINDOWS
    uint32 attribs = win32.GetFileAttributesA(path);
    return attribs != win32.INVALID_FILE_ATTRIBUTES;
#elif OS_GROUP_UNIX
    return unix.access(path, unix.F_OK) == 0;
#endif
}

/*
 * Returns true if the file system has a file or
 * directory at the given path.
 */
bool exists(const String^ path) {
    return exists(path.buffer);
}

/*
 * Returns true if the file system has a file but
 * is not a directory at the given path.
 */
bool file_exists(const char* path) {
#if OS_GROUP_WINDOWS
    uint32 attribs = win32.GetFileAttributesA(path);
    return attribs != win32.INVALID_FILE_ATTRIBUTES &&
          (attribs &  win32.FILE_ATTRIBUTE_DIRECTORY) == 0;
#elif OS_GROUP_UNIX
    Stat stats;
    if unix.stat(path, &stats) == 0 {
        return !unix.__S_ISTYPE(stats.st_mode, unix.__S_IFDIR);
    }
    return false;
#endif
}

/*
 * Returns true if the file system has a file but
 * is not a directory at the given path.
 */
bool file_exists(const String^ path) {
    return file_exists(path.buffer);
}

/*
 * Returns true if the file system has a directory
 * at the given path.
 */
bool directory_exists(const char* path) {
#if OS_GROUP_WINDOWS
    uint32 attribs = win32.GetFileAttributesA(path);
    return attribs != win32.INVALID_FILE_ATTRIBUTES &&
          (attribs &  win32.FILE_ATTRIBUTE_DIRECTORY) != 0;
#elif OS_GROUP_UNIX
    Stat stats;
    if unix.stat(path, &stats) == 0 {
        return unix.__S_ISTYPE(stats.st_mode, unix.__S_IFDIR);
    }
    return false;
#endif
}

/*
 * Returns true if the file system has a directory
 * at the given path.
 */
bool directory_exists(const String^ path) {
    return directory_exists(path.buffer);
}

/*
 * Creates the directory at the given path. Returns
 * true if created.
 */
bool mkdir(const char* path) {
    // TODO: improve the return to indicate why it failed
    //       besides just a bool for if is succeeded or not.
    // TODO: We will also want to pass a variable for creating
    //       the parent directories if the user wants.

#if OS_GROUP_WINDOWS
    return win32.CreateDirectoryA(path, null) != 0;
#elif OS_GROUP_UNIX
    return unix.mkdir(path, 0775) == 0;
#endif
}

/*
 * Creates the directory at the given path. Returns
 * true if created.
 */
bool mkdir(const String^ path) {
    return mkdir(path.buffer);
}

/*
 * Deletes the file or directory if it exists.
 * Returns true if it succeeded.
 *
 * If deleting a directory the directory must be
 * empty.
 */
bool remove(const char* path) {

#if OS_GROUP_WINDOWS
    uint32 attribs = win32.GetFileAttributesA(path);
    if attribs == win32.INVALID_FILE_ATTRIBUTES {
        return false;
    }
    if (attribs & win32.FILE_ATTRIBUTE_DIRECTORY) != 0 {
        return win32.RemoveDirectoryA(path) != 0;
    }
    return win32.DeleteFileA(path) != 0;
#elif OS_GROUP_UNIX
    return unix.remove(path) == 0;
#endif
}

/*
 * Deletes the file or directory if it exists.
 * Returns true if it succeeded.
 *
 * If deleting a directory the directory must be
 * empty.
 */
bool remove(const String^ path) {
    return remove(path.buffer);
}

FileHandle open(const char* path, FileFlag(uint32) flags) {
#if OS_GROUP_WINDOWS
    uint32 access_flags = 0;
    uint32 share_flags  = 0;
    uint32 create_flags = 0;

    if flags == 0 {
        access_flags = win32.GENERIC_ALL;
    }

    if (flags & FileFlag.IN) != 0 {
        access_flags |= win32.GENERIC_READ;
    }

    if (flags & FileFlag.APPEND) != 0 {
        access_flags |= win32.FILE_APPEND_DATA;
    } elif (flags & FileFlag.OUT) != 0 {
        access_flags |= win32.GENERIC_WRITE;
    }

    if (flags & FileFlag.SHARE) != 0 {
        share_flags |= win32.FILE_SHARE_READ;
    }

    if (flags & FileFlag.CREATE) != 0 {
        if (flags & FileFlag.APPEND) != 0 {
            create_flags |= win32.OPEN_ALWAYS;
        } else {
            // Windows is weird and none of the create options allow us to simply
            // overwrite the old file. We will simply remove the existing file if
            // it exists then create a new one.
            remove(path); // TODO: should this report an error if it fails?
            create_flags |= win32.CREATE_NEW;
        }
    } else {
        create_flags |= win32.OPEN_EXISTING;
    }

    void* handle = win32.CreateFileA(path,
                                     access_flags,
                                     share_flags,
                                     null,
                                     create_flags,
                                     win32.FILE_ATTRIBUTE_NORMAL,
                                     null);

    if handle == win32.INVALID_HANDLE_VALUE {
        // TODO: Proper error handling!
        module.println("Failed to open file :(");
        return FileHandle{ null };
    }

    return FileHandle{ handle };
#elif OS_GROUP_UNIX

    // TODO: O_LARGEFILE -- Allow working for large file sizes.

    int32 os_flags = 0;
    uint32 os_mode = 0;

    if (flags & FileFlag.IN) != 0 && (flags & FileFlag.OUT) != 0 {
        os_flags |= unix.O_RDWR;
    } elif (flags & FileFlag.IN) != 0 {
        os_flags |= unix.O_RDONLY;
    } elif (flags & FileFlag.OUT) != 0 {
        os_flags |= unix.O_WRONLY;
    }

    if (flags & FileFlag.APPEND) != 0 {
        os_flags |= unix.O_APPEND;
    } else {
        os_flags |= unix.O_TRUNC;
    }

    if (flags & FileFlag.CREATE) != 0 {
        os_flags |= unix.O_CREAT;
        // 0666
        os_mode = unix.S_IRUSR | unix.S_IWUSR | unix.S_IRGRP |
                  unix.S_IWGRP | unix.S_IROTH | unix.S_IWOTH;
    }

    int32 handle = unix.open(path, os_flags, os_mode);
    if handle == -1 {
        // TODO: proper error handling!
        module.println("Failed to open file :(");
        return FileHandle{ -1 };
    }

    return FileHandle{ handle };
#endif
}

FileHandle open(const String^ path, FileFlag(uint32) flags) {
    return open(path.buffer, flags);
}