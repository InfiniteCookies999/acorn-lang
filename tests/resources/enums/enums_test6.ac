
#if OS_GROUP_WINDOWS

native dllimport fn GetStdHandle(nStdHandle: uint32) -> void*;

native dllimport fn WriteFile(hFile:                  void*,
                              lpBuffer:               const void*,
                              nNumberOfBytesToWrite:  uint32,
                              lpNumberOfBytesWritten: uint32*,
                              lpOverlapped:           void*
                              ) -> int32;

#elif OS_GROUP_UNIX

native fn write(fd: int32, buf: const void*, count: usize) -> isize;

#endif

fn write_val(val: int) {

#if OS_GROUP_WINDOWS
    handle: void* = GetStdHandle(-11);
    written: uint32;
    c: char = as(char) val;
    WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    c: char = as(char) val;
    write(1, &c, 1);
#endif

}

enum En {
    A = 55,
    B = 56,
    C = 57,
    D = 58
}

fn main() {

    e1: En = En.A;
    v1: En$ = e1 + 10;
    write_val(as(int) v1);

    e2: En = En.B;
    v2: En$ = e2 + 10;
    write_val(as(int) v2);

    e3: En = En.C;
    v3: En$ = e3 + 10;
    write_val(as(int) v3);

    e4: En = En.D;
    v4: En$ = e4 + 10;
    write_val(as(int) v4);

}