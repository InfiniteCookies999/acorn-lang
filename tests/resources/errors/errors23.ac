import std;
import std.Error;

struct TestError :: *Error {
    const char* get_name() const {
        return "TestError";
    }
    const char* get_message() const {
        return "error raised!";
    }
}

void write_val(int val) {

#if OS_GROUP_WINDOWS
    void* handle = std.GetStdHandle(-11);
    uint32 written;
    char c = as(char) val;
    std.WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    char c = as(char) val;
    std.write(1, &c, 1);
#endif

}

struct B {
    int v;

    ~B() {
        std.print("~B called!");
    }
}

struct C {
    ~C() {
        std.print("~C called!");
    }
}

struct D {
    ~D() {
        std.print("~D called!");
    }
}

struct E {
    ~E() {
        std.print("~E called!");
    }
}

struct A {

    B f(bool b) raises TestError {
        if b {
            raise TestError{};
        } else {
            return B{ 64 };
        }
    }

    ~A() {
        std.print("~A called!");
    }
}

A foo() {
    return A{};
}

void bar(bool b) {
    C c;
    B b2 = try foo().f(b) {
        std.print("caught error!");
        E e;
        return;
    };
    D d;
    write_val(b2.v);
}

void main() {
    bar(false);
    std.print("...");
    bar(true);
}