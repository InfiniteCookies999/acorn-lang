#file(access=pub, namespace=unix)

#if OS_GROUP_UNIX

native void _exit(int32 status);

native isize write(int32 fd, const void* buf, usize count);

const int32 R_OK = 4'i32;
const int32 W_OK = 2'i32;
const int32 X_OK = 1'i32;
const int32 F_OK = 0'i32;

native int32 access(const char* pathname, int32 mode);

struct Timespec {
    // In seconds.
#if SYS_64 || __USE_TIME_BITS64
  int64 tv_sec;
#else
  int32 tv_sec;
#endif

    // TODO: The linux version of this is way more complicated
    // and probably want to do way more case situations eventually.
#if SYS_64
    int64 tv_nsec;
#else
    #if SYS_ENDIAN == SYS_BIG_ENDIAN
        int32 _pad;
        int32 tv_nsec;
    #else
        int32 tv_nsec;
        int32 _pad;
    #endif    
#endif

}

// TODO: really this should be using the type information
// of C. but due to serious difficulties in implementing that
// the implementation will use fixed size types for now.
struct Stat {

#if __USE_TIME_BITS64

        // Device.
    #if SYS_64
        uint64 st_dev;
    #else
        uint32 st_dev;
    #endif

        // File serial number.
        uint64 st_ino;

        // File mode.
        uint32 st_mode;

        // link count.
    #if SYS_64
        uint64 st_nlink;
    #else
        uint32 st_nlink;
    #endif

        // User ID of the file's owner.
        uint32 st_uid;
        // Group ID of the file's group.
        uint32 st_gid;

        // Device number, if device.
    #if SYS_64
        uint64 st_rdev;
    #else
        uint32 st_rdev;
    #endif

        // Size of file, in bytes.
        int64 st_size;

        // Optimal block size for I/O.
    #if SYS_64
        int64 st_blksize;
    #else
        int32 st_blksize;
    #endif

    // Number 512-byte blocks allocated.
    int64 st_blocks;

    #if __USE_XOPEN2K8
        Timespec st_atim;
        Timespec st_mtim;
        Timespec st_ctim;
    #else
        #if SYS_ENDIAN == SYS_BIG_ENDIAN
            int64 st_atime;
            int32 _pad0;
            int32 st_atime_nsec;
            int64 st_mtime;
            int32 _pad1;
            int32 st_mtime_nsec;
            int64 st_ctime;
            int32 _pad1;
            int32 st_ctime_nsec;
        #else
            int64 st_atime;
            int32 st_atime_nsec;
            int32 _pad0;
            int64 st_mtime;
            int32 st_mtime_nsec;
            int32 _pad1;
            int64 st_ctime;
            int32 st_ctime_nsec;
            int32 _pad1;
        #endif

        #if SYS_64
            uint64 __glibc_reserved4;
            uint64 __glibc_reserved5;
        #else
            uint32 __glibc_reserved4;
            uint32 __glibc_reserved5;
        #endif
    #endif
#else
        // Device.
    #if SYS_64
        uint64 st_dev;
    #else
        uint32 st_dev;
    #endif

    #if SYS_64
        uint16 __pad1;
    #endif

        // File serial number.
    #if SYS_64
        uint64 st_ino;
    #else
        uint32 __st_ino;
    #endif

        // File mode and link count.
    #if SYS_64
        uint32 st_mode;
        uint64 st_nlink;
    #else
        uint32 st_nlink;
        uint32 st_mode;
    #endif

        // User ID of the file's owner.
        uint32 st_uid;
        // Group ID of the file's group.
        uint32 st_gid;

    #if SYS_64
        int32 __pad0;
    #endif

        // Device number, if device.
    #if SYS_64
        uint64 st_rdev;
    #else
        uint32 st_rdev;
    #endif

    #if SYS_64
        uint16 __pad2;
    #endif

        // Size of file, in bytes.
        int64 st_size;

        // Optimal block size for I/O.
    #if SYS_64
        int64 st_blksize;
    #else
        int32 st_blksize;
    #endif

        // Number 512-byte blocks allocated.
        int64 st_blocks;

    #if __USE_XOPEN2K8
        /* Nanosecond resolution timestamps are stored in a format
        equivalent to 'struct timespec'.  This is the type used
        whenever possible but the Unix namespace rules do not allow the
        identifier 'timespec' to appear in the <sys/stat.h> header.
        Therefore we have to handle the use of this header in strictly
        standard-compliant sources special.  */
        Timespec st_atim;		/* Time of last access.  */
        Timespec st_mtim;		/* Time of last modification.  */
        Timespec st_ctim;		/* Time of last status change.  */
    #else
        #if SYS_64
            int64  st_atime;		/* Time of last access.  */
            uint64 st_atimensec;	/* Nscecs of last access.  */
            int64  st_mtime;		/* Time of last modification.  */
            uint64 st_mtimensec;	/* Nsecs of last modification.  */
            int64 st_ctime;			/* Time of last status change.  */
            uint64 st_ctimensec;	/* Nsecs of last status change.  */
        #else
            int32  st_atime;		/* Time of last access.  */
            uint32 st_atimensec;	/* Nscecs of last access.  */
            int32  st_mtime;		/* Time of last modification.  */
            uint32 st_mtimensec;	/* Nsecs of last modification.  */
            int32  st_ctime;			/* Time of last status change.  */
            uint32 st_ctimensec;	/* Nsecs of last status change.  */
        #endif 
    #endif

    #if SYS_64
        int64[3] __glibc_reserved;
    #else
        // TODO: We don't take into account __USE_FILE_OFFSET64
        uint32 st_ino;
    #endif
#endif // __USE_TIME_BITS64
};

const uint32 __S_IFMT = 0170000;

const uint32 __S_IFDIR	= 0040000;	/* Directory.  */
const uint32 __S_IFCHR	= 0020000;	/* Character device.  */
const uint32 __S_IFBLK	= 0060000;	/* Block device.  */
const uint32 __S_IFREG	= 0100000;	/* Regular file.  */
const uint32 __S_IFIFO	= 0010000;	/* FIFO.  */
const uint32 __S_IFLNK	= 0120000;	/* Symbolic link.  */
const uint32 __S_IFSOCK	= 0140000;	/* Socket.  */

bool __S_ISTYPE(uint32 mode, uint32 mask) {
    return (mode & __S_IFMT) == mask;
}

native int32 stat(const char* path, Stat* buf);

const int32 CLOCK_REALTIME           = 0;
const int32 CLOCK_MONOTONIC	         = 1;
const int32 CLOCK_PROCESS_CPUTIME_ID = 2;
const int32 CLOCK_THREAD_CPUTIME_ID	 = 3;
const int32 CLOCK_MONOTONIC_RAW	     = 4;
const int32 CLOCK_REALTIME_COARSE    = 5;
const int32 CLOCK_MONOTONIC_COARSE   = 6;
const int32 CLOCK_BOOTTIME           = 7;
const int32 CLOCK_REALTIME_ALARM     = 8;
const int32 CLOCK_BOOTTIME_ALARM     = 9;
const int32 CLOCK_TAI                = 11;
const int32 TIMER_ABSTIME            = 1;

native int32 clock_gettime(int32 clk_id, Timespec* tp);

#endif