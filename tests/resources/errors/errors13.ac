import std;
import std.Error;

struct TestError :: *Error {
    const fn get_name() -> const char* {
        return "TestError";
    }
    const fn get_message() -> const char* {
        return "error raised!";
    }
}

fn write_val(val: int64) {

#if OS_GROUP_WINDOWS
    handle: void* = std.GetStdHandle(-11);
    written: uint32;
    c: char = as(char) val;
    std.WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    c: char = as(char) val;
    std.write(1, &c, 1);
#endif

}

struct A {
    v1: int64;
    v2: int64;
    v3: int64;
    v4: int64;
}

fn foo(b: bool) -> A | raises TestError {
    if (b) {
        raise TestError{};
    } else {
        return A{ 65, 66, 67, 68 };
    }
}

fn main() {
    a1: A = try (foo(false)) {
        std.print("I am not called");
        return;
    };

    write_val(a1.v1);
    write_val(a1.v2);
    write_val(a1.v3);
    write_val(a1.v4);

    a2: A = try (foo(true)) {
        std.print("error caught!");
        return;
    };

    std.print("I am not reached");
}
