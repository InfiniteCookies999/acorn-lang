import std;
import std.Error;

struct TestError :: *Error {
    const fn get_name() -> const char* {
        return "TestError";
    }
    const fn get_message() -> const char* {
        return "error raised!";
    }
}

fn write_val(val: int) {

#if OS_GROUP_WINDOWS
    handle: void* = std.GetStdHandle(-11);
    written: uint32;
    c: char = as(char) val;
    std.WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    c: char = as(char) val;
    std.write(1, &c, 1);
#endif

}

struct A {

    fn f() -> int {
        return 64;
    }

    fn delete () {
        std.print("deconstructor called!");
    }
}

fn foo(b: bool) -> A | raises TestError {
    if b {
        raise TestError{};
    } else {
        return A{};
    }
}

fn bar(b: bool) {
    a: int = try foo(b).f() {
        std.print("caught error!");
        return;
    };
    write_val(a);
}

fn main() {
    bar(false);
    std.print("...");
    bar(true);
}