#file(access=public)

import .. module;
import .io;

interface Error {

    /*
     * The name of the struct which implement's the Error.
     */
    const fn get_name() -> const char*;

    /*
     * An informational message to explain why the error happened.
     */
    const fn get_message() -> const char*;

}

#aborts
struct UnreachableError :: *Error {
    const fn get_name() -> const char* {
        return "UnreachableError";
    }

    const fn get_message() -> const char* {
        return "unreachable code";
    }
}

#aborts
struct OutOfBoundsError :: *Error {
    msg: String;

    fn new(msg: const char*) {
        this.msg #= String{ msg };
    }

    fn new(msg: String) {
        this.msg #= moveobj(msg);
    }

    const fn get_name()    -> const char* { return "OutOfBoundsError"; }
    const fn get_message() -> const char* { return msg.buffer; }
}

#aborts
struct StateError :: *Error {
    msg: String;

    fn new(msg: const char*) {
        this.msg #= String{ msg };
    }

    fn new(msg: String) {
        this.msg #= moveobj(msg);
    }

    const fn get_name()    -> const char* { return "StateError"; }
    const fn get_message() -> const char* { return msg.buffer; }
}

#aborts
struct OutOfMemoryError :: *Error {
    msg: String;

    fn new(msg: const char*) {
        this.msg #= String{ msg };
    }

    fn new(msg: String) {
        this.msg #= moveobj(msg);
    }

    const fn get_name()    -> const char* { return "OutOfMemoryError"; }
    const fn get_message() -> const char* { return msg.buffer; }
}

struct IOError :: *Error {
    msg: String;

    fn new(msg: const char*) {
        this.msg #= String{ msg };
    }

    fn new(msg: String) {
        this.msg #= moveobj(msg);
    }

    const fn get_name()    -> const char* { return "IOError"; }
    const fn get_message() -> const char* { return msg.buffer; }
}

fn abort(error: Error*) {
    error_name := error.get_name();
    message := error.get_message();
    io.print(error_name);
    io.print(": ");
    io.print(message);
    io.print(".");
    module.exit(1);
}