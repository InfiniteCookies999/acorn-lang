
#if OS_GROUP_WINDOWS

native dllimport fn GetStdHandle(nStdHandle: uint32) -> void*;

native dllimport fn WriteFile(hFile:                  void*,
                              lpBuffer:               const void*,
                              nNumberOfBytesToWrite:  uint32,
                              lpNumberOfBytesWritten: uint32*,
                              lpOverlapped:           void*
                              ) -> int32;

#elif OS_GROUP_UNIX

native fn write(fd: int32, buf: const void*, count: usize) -> isize;

#endif

fn print(s: const char*, length: int) {
#if OS_GROUP_WINDOWS
    handle: void* = GetStdHandle(-11);
    written: uint32;
    WriteFile(handle, s, as(uint32) length, &written, null);
#elif OS_GROUP_UNIX
    write(1, s, as(usize) length);
#endif
}

fn main() {

    a1: bool = false;
    b1: bool = true;
    c1: bool = true;

    cond1: bool = a1 && b1 && c1;
    if cond1 {
        print("False1", 6);
    }

    a2: bool = true;
    b2: bool = false;
    c2: bool = true;

    cond2: bool = a2 && b2 && c2;
    if cond2 {
        print("False2", 6);
    }

    a3: bool = true;
    b3: bool = true;
    c3: bool = false;

    cond3: bool = a3 && b3 && c3;
    if cond3 {
        print("False3", 6);
    }

    a4: bool = false;
    b4: bool = false;
    c4: bool = false;

    cond4: bool = a4 && b4 && c4;
    if cond4 {
        print("False4", 6);
    }

    a5: bool = true;
    b5: bool = true;
    c5: bool = true;

    cond5: bool = a5 && b5 && c5;
    if cond5 {
        print("True", 5);
    }
}