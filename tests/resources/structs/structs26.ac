
#if OS_GROUP_WINDOWS

native dllimport void* GetStdHandle(uint32 nStdHandle);

native dllimport int32 WriteFile(void*       hFile,
                                 const void* lpBuffer,
                                 uint32      nNumberOfBytesToWrite,
                                 uint32*     lpNumberOfBytesWritten,
                                 void*       lpOverlapped);

#elif OS_GROUP_UNIX

native isize write(int32 fd, const void* buf, usize count);

#endif

void write_val(int64 val) {

#if OS_GROUP_WINDOWS
    void* handle = GetStdHandle(-11);
    uint32 written;
    char c = as(char) val;
    WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    char c = as(char) val;
    write(1, &c, 1);
#endif

}

struct A {
    int64 a;
    int64 b;
    int64 c;
    int64 d;
}

A foo(bool t) {
    A a1;
    a1.a = 65;
    a1.b = 66;
    a1.c = 67;
    a1.d = 68;

    A a2;
    a2.a = 97;
    a2.b = 98;
    a2.c = 99;
    a2.d = 100;

    if t {
        return a1;
    }

    return a2;
}

void main() {
    A a1 = foo(true);
    A a2 = foo(false);

    write_val(a1.a);
    write_val(a1.b);
    write_val(a1.c);
    write_val(a1.d);

    write_val(a2.a);
    write_val(a2.b);
    write_val(a2.c);
    write_val(a2.d);
}