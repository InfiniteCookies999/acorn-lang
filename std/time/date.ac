#file(access=public)

const int SECONDS_PER_DAY = 86400;

// A cache of the amount of days from epoch up until Jan 1st
// of years starting from 1970 and going till 2050.
private const int64[81] DAYS_JAN1_OF_YEAR_TABLE = [
    719528'u64, // year 1970
    719893,
    720258,
    720624,
    720989,
    721354,
    721719,
    722085,
    722450,
    722815,
    723180,
    723546,
    723911,
    724276,
    724641,
    725007,
    725372,
    725737,
    726102,
    726468,
    726833,
    727198,
    727563,
    727929,
    728294,
    728659,
    729024,
    729390,
    729755,
    730120,
    730485,
    730851,
    731216,
    731581,
    731946,
    732312,
    732677,
    733042,
    733407,
    733773,
    734138,
    734503,
    734868,
    735234,
    735599,
    735964,
    736329,
    736695,
    737060,
    737425,
    737790,
    738156,
    738521,
    738886,
    739251,
    739617,
    739982,
    740347,
    740712,
    741078,
    741443,
    741808,
    742173,
    742539,
    742904,
    743269,
    743634,
    744000,
    744365,
    744730,
    745095,
    745461,
    745826,
    746191,
    746556,
    746922,
    747287,
    747652,
    748017,
    748383,
    748748, // year 2050
];

// First index is not meant to be accessed since months of
// the year start at 1 not zero.
private const DAYS_INTO_MONTH = [
    0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334
];

struct Date {

    int year;
    int month;
    int day_of_year;
    int day_of_month;
    // monday is considered the start of the week.
    int day_of_week;

}

/*
 * Creates a date at the current time using system time.
 */
Date get_date_now() {
    // TODO: This needs to obtain the timezone and get the offset
    // and apply it to the time in milliseconds.
    int64 time = sys_time_in_millisecs();
    return create_date(time);
}

/*
 * Creates a Date given `time`.
 *
 * Time is represented in milliseconds.
 *
 * A time of 0 is the start of Jan 1, 1970. Use negative times
 * if you wish to get a year before 1970. You may call this with
 * `std.sys_time_in_millisecs` to get the current year.
 */
Date create_date(int64 time) {
    // TODO: add checks.

    int64 epoch_day = get_epoch_day(time);
    int year = get_date_year_by_epoch_day(epoch_day);
    bool is_leap = is_leap_year(year);

    // Getting the first day of the year relative to the first day
    // of epoch then getting the day of the year by figuring out the
    // amount of elapsed days from Jan 1 to `epoch_day`.
    int64 days_until_jan1 = get_days_until_jan1(year, is_leap);

    int dayc = as(int) (epoch_day - days_until_jan1);
    int day_of_year = dayc + 1; // Because originally zero indexed.
    if dayc >= 59 {
        // Fill in the gap that is caused pass march first due
        // to feburary only having 28 or 29 days. Once filled
        // the month effectively acts as if it has 30 days allowing
        // it to more uniformly be used in calculations for month
        // calculations.
        dayc += is_leap ? 1 : 2;
    }
    // Taken from Java's source code. Rough idea is it is scaling up so
    // the divisor can apply a similar rule to 30,31 runs then shifting
    // to adjust for months that break the pattern. This may not be accurate
    // at all though.
    int month = (dayc * 12 + 373) / 367;

    // Get the first day of the month then calculate the offset from that day.
    int month_start_day = DAYS_INTO_MONTH[month] + (is_leap ? 1 : 0);
    int day_of_month = day_of_year - month_start_day;

    // Want to calculate this based on the epoch day because days of the week
    // are not relative to the year but are absolute and count up mod 7.
    //
    // Adding 5 because the first day is a Saturday on Jan 1, 0000 and +1 because
    // the calculation is zero indexed.
    int day_of_week = as(int) ((epoch_day+5) % 7) + 1;

    return Date{
        year,
        month,
        day_of_year,
        day_of_month + 1,
        day_of_week
    };
}

private int64 get_days_until_jan1(int year, bool is_leap) {

    // Checking to see if the year is in the cache for performance.
    int rel_year = year - 1970;
    if rel_year >= 0 && rel_year < DAYS_JAN1_OF_YEAR_TABLE.length {
        return DAYS_JAN1_OF_YEAR_TABLE[rel_year];
    }

    int64 y = as(int64) year;

    // This works by getting the previous year's last day and adding 1.
    int64 days = (y * 365) + (y / 4) + (y / 400) - (y / 100) + 1;
    if is_leap {
        // The calculation can accidently add the leap year of the current year
        // so this corrects by subtracting one.
        --days;
    }

    return days;
}

// TODO: move these to common math utilities once generics are supported.
private int64 int64_floor_div(int64 x, int64 d) {
    return x >= 0 ? (x/d) : ((x+1)/d - 1);
}

/*
 * Gets the number of days elapsed since Jan 1, 0000 given `time`.
 *
 * Time is represented in milliseconds.
 *
 * A time of 0 is the start of Jan 1, 1970. Use negative times
 * if you wish to get a year before 1970. You may call this with
 * `std.sys_time_in_millisecs` to get the current year.
 */
int64 get_epoch_day(int64 time) {
    const int64 DAYS_SINCE_1970 = 719528;
    int64 epoch_day = int64_floor_div(time, as(int64)SECONDS_PER_DAY * 1000);
    return epoch_day + DAYS_SINCE_1970;
}

 /*
 * Calculates the Gregorian calendar year from the given `time`.
 *
 * Time is represented in milliseconds.
 *
 * A time of 0 is the start of Jan 1, 1970. Use negative times
 * if you wish to get a year before 1970. You may call this with
 * `std.sys_time_in_millisecs` to get the current year.
 */
int get_date_year(int64 time) {
    return get_date_year_by_epoch_day(get_epoch_day(time));
}

 /*
 * Calculates the Gregorian calendar year from a given `epoch_day`.
 * `epoch_day` represents the number of days elapsed since Jan 1, 0000,
 * including adjustments for leap years based on the Gregorian calendar.
 */
int get_date_year_by_epoch_day(int64 epoch_day) {

    const int64 DAYS_IN_400_YEARS = 146097;
    const int64 DAYS_IN_100_YEARS = 36524;
    const int64 DAYS_IN_4_YEARS   = 1461;
    const int64 DAYS_IN_YEAR      = 365;

    // Obtaining the number of years within 400, 100, 4, and yearly
    // cycles by dividing by the number of days within each cycle
    // (leap year inclusive).
    int64 n400_years, n100_years, n4_years, n_years;
    bool has_100_years = false;
    int64 leftover;

    // TODO: this needs to handle negative epoch days.

    n400_years = epoch_day / DAYS_IN_400_YEARS;
    leftover   = epoch_day % DAYS_IN_400_YEARS;
    // Have to check that it is more than `DAYS_IN_100_YEARS` because
    // the first 100 years comes after a leap year meaning it has one
    // additional day.
    if leftover > DAYS_IN_100_YEARS {
        // Consume the 100 years with an extra day.
        ++n100_years;
        leftover -= DAYS_IN_100_YEARS + 1;
        // Gets the remaining 100 years.
        n100_years += leftover / DAYS_IN_100_YEARS;
        leftover   = leftover % DAYS_IN_100_YEARS;
        has_100_years = true;
    }
    n4_years = leftover / DAYS_IN_4_YEARS;
    leftover = leftover % DAYS_IN_4_YEARS;
    // If 100 years has not passed then the next years
    // come after a leap year and so the first year must
    // consume the leap day.
    if !has_100_years && leftover > 365 {
        ++n_years;
        leftover -= 366;
        n_years += leftover / 365;
    } elif has_100_years {
        n_years = leftover / 365;
    }

    int64 year = n400_years * 400 + n100_years * 100 + n4_years * 4 + n_years;
    return as(int) year;
}

/*
 * Returns true if the `year` is a leap year.
 */
bool is_leap_year(int year) {
    // First check if it is divisible by 16 because 100, 200, 300 are not divisible
    // by 14 but 400 is and it is a leap year if divisible by 100.
    if (year & 15) == 0 {
        return true;
    }

    // Check if divisible by 4 but not by 100.
    return (year & 3) == 0 && year % 100 != 0;
}