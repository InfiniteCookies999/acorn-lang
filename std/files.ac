#file(access=pub, namespace=files)

import .win32;
import .unix;

#if OS_GROUP_UNIX
import .unix.Stat;
#endif

/*
 * Returns true if the file system has a file or
 * directory at the given path.
 */
bool exists(const char* path) {
#if OS_GROUP_WINDOWS
    uint32 attribs = win32.GetFileAttributesA(path);
    return attribs != win32.INVALID_FILE_ATTRIBUTES;
#elif OS_GROUP_UNIX
    return unix.access(path, unix.F_OK) == 0;
#endif
}

/*
 * Returns true if the file system has a file but
 * is not a directory at the given path.
 */
bool file_exists(const char* path) {
#if OS_GROUP_WINDOWS
    uint32 attribs = win32.GetFileAttributesA(path);
    return attribs != win32.INVALID_FILE_ATTRIBUTES &&
          (attribs &  win32.FILE_ATTRIBUTE_DIRECTORY) == 0;
#elif OS_GROUP_UNIX
    Stat stats;
    if unix.stat(path, &stats) == 0 {
        return !unix.__S_ISTYPE(stats.st_mode, unix.__S_IFDIR);
    }
    return false;
#endif
}

/*
 * Returns true if the file system has a directory
 * at the given path.
 */
bool directory_exists(const char* path) {
#if OS_GROUP_WINDOWS
    uint32 attribs = win32.GetFileAttributesA(path);
    return attribs != win32.INVALID_FILE_ATTRIBUTES &&
          (attribs &  win32.FILE_ATTRIBUTE_DIRECTORY) != 0;
#elif OS_GROUP_UNIX
    Stat stats;
    if unix.stat(path, &stats) == 0 {
        return unix.__S_ISTYPE(stats.st_mode, unix.__S_IFDIR);
    }
    return false;
#endif
}

/*
 * Creates the directory at the given path. Returns
 * true if created.
 */
bool mkdir(const char* path) {
    // TODO: improve the return to indicate why it failed
    //       besides just a bool for if is succeeded or not.
    // TODO: We will also want to pass a variable for creating
    //       the parent directories if the user wants.

#if OS_GROUP_WINDOWS
    return win32.CreateDirectoryA(path, null) != 0;
#elif OS_GROUP_UNIX
    return false;
#endif
}
