#file(access=public, namespace=math)

/*
 * The ratio between the circumference and diameter of a circle.
 */
PI :: 3.14159265358979323846;

/*
 * The ratio between the circumference and radius of a circle.
 *
 * TAU = 2*PI
 */
TAU :: 6.28318530717958647692;

/*
 * The base of the natural logorithm.
 */
E :: 2.7182818284590452354;

/*
 * Constant which when multiplied by converts a value in degrees
 * to a value in radians.
 *
 * Or use: math.to_radians() function.
 */
DEGREES_TO_RADIANS :: 0.017453292519943295;

/*
 * Constant which when multiplied by converts a value in radians
 * to a value in degrees.
 *
 * Or use: math.to_degrees() function.
 */
RADIANS_TO_DEGREES :: 57.29577951308232;

/*
 * Converts the angle in degrees to radians.
 */
fn to_radians(angle: double) -> double {
    return angle * DEGREES_TO_RADIANS;
}

/*
 * Converts the angle in degrees to radians.
 */
fn to_radians(angle: float) -> float {
    return as(float) (angle * DEGREES_TO_RADIANS);
}

/*
 * Converts the angle in radians to degrees.
 */
fn to_degrees(angle: double) -> double {
    return angle * RADIANS_TO_DEGREES;
}

/*
 * Converts the angle in radians to degrees.
 */
fn to_degrees(angle: float) -> float {
    return angle * RADIANS_TO_DEGREES;
}

/*
 * Calculates the smallest mathematical integer
 * not less than x.
 *
 * Example: floor(4.3) == 4.0
 */
native fn floor(x: double) -> double;

/*
 * Calculates the smallest mathematical integer
 * not less than x.
 *
 * Example: floor(4.3) == 4.0
 */
native fn floor(x: float) -> float;

/*
 * Calculates the largest mathematical integer
 * not greater than x.
 *
 * Example: floor(4.3) == 5.0
 */
native fn ceil(x: double) -> double;

/*
 * Calculates the largest mathematical integer
 * not greater than x.
 *
 * Example: floor(4.3) == 5.0
 */
native fn ceil(x: float) -> float;

/*
 * Calculates x raised to the power of exp.
 */
native fn pow(x: double, exp: double) -> double;

/*
 * Calculates x raised to the power of exp.
 */
native fn pow(x: float, exp: float) -> float;

/*
 * Calculates the natural logorithm of x.
 *
 * The natural logorithm is a logorithm with
 * base e, Euler's number. This function is
 * often denoted as just "log(x)" in maths.
 */
native("log") fn ln(x: double) -> double;

/*
 * Calculates the natural logorithm of x.
 *
 * The natural logorithm is a logorithm with
 * base e, Euler's number. This function is
 * often denoted as just "log(x)" in maths.
 */
native("log") fn ln(x: float) -> float;

/*
 * Calculates the logorithm of x with a
 * base of 10.
 */
native fn log10(x: double) -> double;

/*
 * Calculates the logorithm of x with a
 * base of 10.
 */
native fn log10(x: float) -> float;

/*
 * Returns the positive sqrt of x.
 *
 * If x is less than 0 then nan is returned.
 */
native fn sqrt(x: double) -> double;

/*
 * Returns the positive sqrt of x.
 *
 * If x is less than 0 then nan is returned.
 */
native fn sqrt(x: float) -> float;

/*
 * Returns the trigonometric sine of angle x.
 *
 * @param x an angle in radians.
 */
native fn sin(x: double) -> double;

/*
 * Returns the trigonometric sine of angle x.
 *
 * @param x an angle in radians.
 */
native fn sin(x: float) -> float;

/*
 * Returns the trigonometric cosine of angle x.
 *
 * @param x an angle in radians.
 */
native fn cos(x: double) -> double;

/*
 * Returns the trigonometric cosine of angle x.
 *
 * @param x an angle in radians.
 */
native fn cos(x: float) -> float;

/*
 * Returns the trigonometric tangent of angle x.
 *
 * @param x an angle in radians.
 */
native fn tan(x: double) -> double;

/*
 * Returns the trigonometric tangent of angle x.
 *
 * @param x an angle in radians.
 */
native fn tan(x: float) -> float;

/*
 * Returns the trigonometric arc sine (inverse of sin)
 * of angle x.
 *
 * @param x an angle in radians.
 */
native fn asin(x: double) -> double;

/*
 * Returns the trigonometric arc sine (inverse of sin)
 * of angle x.
 *
 * @param x an angle in radians.
 */
native fn asin(x: float) -> float;

/*
 * Returns the trigonometric arc cosine (inverse of cos)
 * of angle x.
 *
 * @param x an angle in radians.
 */
native fn acos(x: double) -> double;

/*
 * Returns the trigonometric arc cosine (inverse of cos)
 * of angle x.
 *
 * @param x an angle in radians.
 */
native fn acos(x: float) -> float;

/*
 * Returns the trigonometric arc tangent (inverse of tan)
 * of angle x.
 *
 * @param x an angle in radians.
 */
native fn atan(x: double) -> double;

/*
 * Returns the trigonometric arc tangent (inverse of tan)
 * of angle x.
 *
 * @param x an angle in radians.
 */
native fn atan(x: float) -> float;

// -- Other functions we should include at some point:
//    * Hyperbolic trigonometric functions.
//    * atan2
//    * clamp functions
//