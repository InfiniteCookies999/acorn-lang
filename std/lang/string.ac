#file(access=public)

private char DEFAULT_CHAR = '\0';

struct String {

    readonly char* buffer;
    readonly int   length;
    private  int   capacity;

    /*
     * Creates a String with a length of 0.
     */
    String() {
        buffer = &DEFAULT_CHAR;
    }

    copyobj String(const String* o) {
        this.length   = o.length;
        this.capacity = o.capacity;
        this.buffer   = as(char*) malloc(length + 1); // +1 for null terminator.
        memcpy(this.buffer, o.buffer, length + 1);
    }

    moveobj String(String* o) {
        this.length   = o.length;
        this.buffer   = o.buffer;
        this.capacity = o.capacity;
        o.length   = 0;
        o.buffer   = &DEFAULT_CHAR;
        o.capacity = 0;
    }

    /*
     * Creates a String from a null terminated
     * character `buffer`.
     */
    String(const char* buffer) {
        this.length   = strlen(buffer);
        this.capacity = this.length;
        this.buffer   = as(char*) malloc(length + 1); // +1 for null terminator.
        memcpy(this.buffer, buffer, length + 1);
    }

    /*
     * Creates a String from a character `buffer` and an
     * explicit `length`. Because of the explicitly defined
     * `length` the `buffer` does not have to be null terminated.
     *
     * If the `buffer` is null terminated do not include the
     * null termination in the `length`.
     */
    String(const char* buffer, int length) {
        this.length   = length;
        this.capacity = length;
        this.buffer   = as(char*) malloc(length + 1); // +1 for null terminator.
        memcpy(this.buffer, buffer, length);
        this.buffer[length] = '\0';
    }

    /*
     * Creates a String from a character `buffer` and
     * an explicit `length`. Because of the explicitly
     * defined `length` the `buffer` does not have to be
     * null terminated (Unless `copy_buffer` is set to false).
     *
     * If the `buffer` is null terminated do not include
     * the null termination in the length.
     *
     * @Param copy_buffer if true it allocates new memory
     *                    and copies the `buffer` over otherwise
     *                    the `buffer` is assumed to be already
     *                    allocated and null terminated.
     *                    It will also assume ownership over the
     *                    memory if set to true. It will also assume
     *                    the allocation size of the `buffer` is the
     *                    `length` passed.
     */
    String(char* buffer, int length, bool copy_buffer) {
        this.length   = length;
        this.capacity = length;
        if copy_buffer {
            this.buffer = as(char*) malloc(length + 1); // +1 for null terminator.
            memcpy(this.buffer, buffer, length);
            this.buffer[length] = '\0';
        } else {
            this.buffer = buffer;
        }
    }

    /*
     * The length of the String is zero.
     */
    bool empty() const {
        return length == 0;
    }

    /*
     * Returns a sub-string of this string which is in the range
     * of `begin_idx` and goes to the end of the string.
     */
    String substr(int begin_idx) const {
        return substr(begin_idx, length);
    }

    /*
     * Returns a sub-string of this string which is in the range
     * of `begin_idx` and goes until `end_idx - 1`.
     */
    String substr(int begin_idx, int end_idx) const {
        if (begin_idx < 0)
            raise OutOfBoundsError{ "begin_idx < 0" };

        if (end_idx > length)
            raise OutOfBoundsError{ "end_idx > length" };

        int sublength = end_idx - begin_idx;
        if sublength == 0 {
            return String{};
        }

        if begin_idx == 0 && end_idx == length {
            return *this;
        }

        return String{ this.buffer + begin_idx, sublength };
    }

    /*
     * Replaces all occurences of the `old_char` in this string
     * with the `new_char`.
     */
    String^ replace(char old_char, char new_char) {
        loop int i : 0..<length {
            if buffer[i] == old_char {
                buffer[i] = new_char;
            }
        }
        return this;
    }

    /*
     * Replaces all occurences of `sub_str` in this string
     * with the new string `replace_str`.
     */
    String^ replace(const String^ sub_str, const String^ replace_str) {
        return replace(sub_str.buffer    , sub_str.length,
                       replace_str.buffer, replace_str.length);
    }

    /*
     * Replaces all occurences of `sub_str` in this string
     * with the new string `replace_str`.
     */
    String^ replace(const char* sub_str, const String^ replace_str) {
        return replace(sub_str           , strlen(sub_str),
                       replace_str.buffer, replace_str.length);
    }

    /*
     * Replaces all occurences of `sub_str` in this string
     * with the new string `replace_str`.
     */
    String^ replace(const String^ sub_str, const char* replace_str) {
        return replace(sub_str.buffer, sub_str.length,
                       replace_str   , strlen(replace_str));
    }

    /*
     * Replaces all occurences of `sub_str` in this string
     * with the new string `replace_str`.
     */
    String^ replace(const char* sub_str, const char* replace_str) {
        return replace(sub_str    , strlen(sub_str),
                       replace_str, strlen(replace_str));
    }

    String^ replace(const char* sub_str    , int sub_length,
                    const char* replace_str, int replace_length) {

        if sub_length == 1 && replace_length == 1 {
            // Taking the faster path of replacing characters
            // instead of full strings if we can.
            return replace(*sub_str, *replace_str);
        }

        if this.length == 0 {
            return this;
        }

        int[64] tmp_buffer;
        int*    ext_buffer;
        int     ext_buffer_capacity = 0;
        int     index_count = 0;

        char* head = this.buffer;
        char* end  = this.buffer + this.length;

        loop head + sub_length - 1 < end {
            int remaining = as(int) (end - head);
            int index = find_substring(head, remaining, sub_str, sub_length);
            if index == -1  break; // No more remaining substrings to replace.

            // Have to add the offset of the head since we only search for indexes
            // starting at the head but we want indexes relative to this.buffer's
            // memory since replacements take place after iterating through the
            // string.
            int offset = as(int)(head - this.buffer);
            index += offset;
            if index_count >= tmp_buffer.length {
                // Out of temporary memory so must allocate memory!

                int min_capacity = index_count+1 - tmp_buffer.length;
                int* new_ext_buffer;
                if ext_buffer_capacity == 0 {
                    ext_buffer_capacity = 1;
                    new_ext_buffer = as(int*) malloc(ext_buffer_capacity * sizeof(int));

                    ext_buffer = new_ext_buffer;
                } elif ext_buffer_capacity < min_capacity {
                    int ext_buffer_length = ext_buffer_capacity;
                    ext_buffer_capacity *= 2;
                    new_ext_buffer = as(int*) malloc(ext_buffer_capacity * sizeof(int));

                    // Not the first allocation so have to copy over.
                    memcpy(new_ext_buffer, ext_buffer, ext_buffer_length * sizeof(int));
                    free(ext_buffer);

                    ext_buffer = new_ext_buffer;
                }

                ext_buffer[index_count - tmp_buffer.length] = index;
            } else {
                tmp_buffer[index_count] = index;
            }

            ++index_count;

            head = this.buffer + index + sub_length;
        }

        if index_count == 0 {
            // There is nothing to replace!
            return this;
        }

        int new_string_length = this.length + (replace_length * index_count) - (sub_length * index_count);

        // Cannot use existing capacity here because to construct the new buffer we
        // rely on the memory of the existing buffer.
        char* new_buffer = as(char*) malloc(new_string_length + 1); // +1 for null termination.

        int new_buffer_offset = 0, buffer_offset = 0;
        loop int i : 0..<index_count {
            int index;
            if i < tmp_buffer.length {
                index = tmp_buffer[i];
            } else {
                index = ext_buffer[i - tmp_buffer.length];
            }

            int length_before_index = index - buffer_offset;
            if length_before_index > 0 {
                memcpy(new_buffer  + new_buffer_offset,
                       this.buffer + buffer_offset,
                       length_before_index);
                new_buffer_offset += length_before_index;
                buffer_offset     += length_before_index;
            }

            memcpy(new_buffer + new_buffer_offset, replace_str, replace_length);
            new_buffer_offset += replace_length;
            buffer_offset     += sub_length;
        }

        // There still might be stuff at the end!
        int length_before_index = length - buffer_offset;
        if length_before_index > 0 {
            memcpy(new_buffer  + new_buffer_offset,
                   this.buffer + buffer_offset,
                   length_before_index);
        }

        // Null terminating.
        new_buffer[new_string_length] = '\0';

        free(this.buffer);
        this.buffer   = new_buffer;
        this.length   = new_string_length;
        this.capacity = new_string_length;

        free(ext_buffer);

        return this;
    }

    /*
     * Removes all occurrences substring `s` from this String.
     */
    String^ remove(const char* s) {
        return replace(s, "");
    }

    /*
     * Removes all occurrences substring `s` from this String.
     */
    String^ remove(const String^ s) {
        return replace(s.buffer, s.length, "", 0);
    }

    /*
     * Finds the first occurrence of `sub` in this String and
     * returns the index into this String.
     *
     * If `sub` is empty returns 0.
     */
    int find(const char* sub) const {
        return \find_substring(this.buffer, this.length, sub, strlen(sub));
    }

    /*
     * Finds the first occurrence of `sub` in this String and
     * returns the index into this String.
     *
     * If `sub` is empty returns 0.
     */
    int find(const String^ sub) const {
        return \find_substring(this.buffer, this.length, sub.buffer, sub.length);
    }

    /*
     * Finds the first occurrence of `c` in this String and
     * returns the index into this String.
     */
    int find(char c) const {
        return \find_character(this.buffer, this.length, c);
    }

    /*
     * Finds the last occurrence of `sub` in this String and
     * returns the index into this String.
     *
     * If `sub` is empty returns this.length - 1.
     */
    int find_last(const char* sub) const {
        return \find_last_substring(this.buffer, this.length, sub, strlen(sub));
    }

    /*
     * Finds the last occurrence of `sub` in this String and
     * returns the index into this String.
     *
     * If `sub` is empty returns this.length - 1.
     */
    int find_last(const String^ sub) const {
        return \find_last_substring(this.buffer, this.length, sub.buffer, sub.length);
    }

    /*
     * Finds the last occurrence of `c` in this String and
     * returns the index into this String.
     */
    int find_last(char c) const {
        return \find_last_character(this.buffer, this.length, c);
    }

    /*
     * Converts all the characters in the String to lowercase.
     */
    String^ tolower() {
        loop int i : 0..<length {
            buffer[i] = \tolower(buffer[i]);
        }
        return this;
    }

    /*
     * Converts all the characters in the String to uppercase.
     */
    String^ toupper() {
        loop int i : 0..<length {
            buffer[i] = \toupper(buffer[i]);
        }
        return this;
    }

    /*
     * Returns true if this String starts with `sub` string.
     */
    bool starts_with(const char* sub) const {
        int sub_length = strlen(sub);
        if sub_length > length {
            return false;
        }
        return memcmp(this.buffer, sub, sub_length) == 0;
    }

    /*
     * Returns true if this String starts with `sub` string.
     */
    bool starts_with(const String^ sub) const {
        if sub.length > length {
            return false;
        }
        return memcmp(this.buffer, sub.buffer, sub.length) == 0;
    }

    /*
     * Returns true if this String ends with `sub` string.
     */
    bool ends_with(const char* sub) const {
        int sub_length = strlen(sub);
        if sub_length > length {
            return false;
        }
        int offset = this.length - sub_length;
        return memcmp(this.buffer + offset, sub, sub_length) == 0;
    }

    /*
     * Returns true if this String ends with `sub` string.
     */
    bool ends_with(const String^ sub) const {
        if sub.length > length {
            return false;
        }
        int offset = this.length - sub.length;
        return memcmp(this.buffer + offset, sub.buffer, sub.length) == 0;
    }

    /*
     * Sets the length of the string to zero but keeps
     * the existing memory allocation.
     */
    void clear() {
        length = 0;
    }

    /*
     * Removes any ASCII character less than or equal to the space
     * character from the front of the String. This means it will
     * consider standard characters such as ' ', '\t', '\r', '\n',
     * or '\f', but also include characters such as ascii code 24
     * for [CANCEL].
     */
    String^ trim_leading() {
        if length == 0 {
            return this;
        }

        const char* ptr = buffer;
        loop *ptr <= ' ' {
            ++ptr;
        }

        // Check for no changes.
        if ptr == buffer {
            return this;
        }

        int amount_trimmed = as(int) (ptr - buffer);
        memmove(buffer, ptr, length - amount_trimmed);
        length -= amount_trimmed;

        return this;
    }

    /*
     * Removes any ASCII character less than or equal to the space
     * character from the back of the String. This means it will
     * consider standard characters such as ' ', '\t', '\r', '\n',
     * or '\f', but also include characters such as ascii code 24
     * for [CANCEL].
     */
    String^ trim_trailing() {
        if length == 0 {
            return this;
        }

        const char* end = buffer + length - 1;
        const char* ptr = end;
        loop *ptr <= ' ' && ptr > buffer {
            --ptr;
        }

        int amount_trimmed = as(int) (end - ptr);
        length -= amount_trimmed;

        return this;
    }

    ~String() {
        if buffer != &DEFAULT_CHAR { // Make sure it is not just referencing the global memory.
            free(buffer);
            length   = 0;
            capacity = 0;
            buffer   = &DEFAULT_CHAR;
        }
    }
}

/*
 * Counts the number of characters until
 * it finds a null terminator in the c-string.
 *
 * @return  length of the null terminated
 *          c-string.
 */
int strlen(const char* s) {
    if !s  return 0;
    return as(int) _strlen(s);
}
private native("strlen") isize _strlen(const char* s);

/*
 * Copies the contents of `source` into `dest`. Make sure the `dest` pointer
 * is allocated before calling this function.
 *
 * @source Must be a null terminated c-string.
 */
native char* strcpy(char* dest, const char* source);

/*
 * Copies the contents of the `wide_source` into `dest` by treating each
 * wide character as two multibyte characters.
 *
 * @dest_max_size The maximum number of characters that can be stored into
 *                the `dest` buffer. Since the `dest` is null terminated the
 *                size should include space for the null terminator.
 * @wide_source A null terminated wide character c-string.
 * @return        The number of characters that were written into the `dest`
 *                buffer.
 */
int wide_to_multibyte(char* dest, int dest_max_size, const char16* wide_source) {
    return as(int) wcstombs(dest, wide_source, as(isize) dest_max_size);
}
private native isize wcstombs(char* mbstr, const char16* wcstr, isize count);

 /*
  * Compares two strings `s1` and `s2`.
  * Both strings must be null-terminated.
  *
  * If they match returns 0.
  *
  * If the first non-equivalent character in `s1` is larger than
  * the character in `s2` returns +1.
  *
  * If the first non-equivalent character in `s2` is larger than
  * the character in `s1` returns -1.
  */
int strcmp(const char* s1, const char* s2) {
    return as(int) strcmp(s1, s2);
}
private native int32 strcmp(const char* s1, const char* s2);

 /*
  * Compares two wide character strings `s1` and `s2`.
  * Both strings must be null-terminated.
  *
  * If they match returns 0.
  *
  * If the first non-equivalent character in `s1` is larger than
  * the character in `s2` returns +1.
  *
  * If the first non-equivalent character in `s2` is larger than
  * the character in `s1` returns -1.
  */
int wide_cmp(const char16* s1, const char16* s2) {
    return as(int) wcscmp(s1, s2);
}
private native int32 wcscmp(const char16* string1, const char16* string2);

/*
 * Converts a 64 bit unsigned integer to a string containing
 * the digits in the `base`.
 *
 * @value The value to convert to a String.
 * @base  The numeric base of the value. Defaults to 10.
 */
String to_string(uint64 value, int base = 10) {
    const BUFFER_SIZE = 21;
    char[BUFFER_SIZE] buffer;

    char* ptr = uint64_to_chars(value, buffer + BUFFER_SIZE - 1, base);
    int length = as(int)(buffer + BUFFER_SIZE) - as(int)ptr;

    return String{ ptr, length };
}

/*
 * Converts a 64 bit integer to a string containing the digits
 * in the `base`.
 *
 * @value The value to convert to a String.
 * @base  The numeric base of the value. Defaults to 10.
 */
String to_string(int64 value, int base = 10) {

    bool is_negative = value < 0;
    if is_negative {
        value = -value;
    }

    const BUFFER_SIZE = 21 + 1;
    char[BUFFER_SIZE] buffer;

    char* ptr = uint64_to_chars(as(uint64) value, buffer + BUFFER_SIZE - 1, base);
    int length = as(int)(buffer + BUFFER_SIZE) - as(int)ptr;

    if is_negative {
        --ptr;
        *ptr = '-';
        ++length;
    }

    return String{ ptr, length };
}

String to_string(int value, int base = 10) {
    return to_string(as(int64) value, base);
}

String to_string(bool b) {
    return b ? String{ "true" , 4 }
             : String{ "false", 5 };
}

String to_string(char c) {
    return String{ &c, 1 };
}

int find_substring(const char* s, int s_length, const char* sub, int sub_length) {
    if s_length == 0 {
        return 0;
    }
    if sub_length == 1 {
        return find_character(s, s_length, *sub);
    }
    if s_length < sub_length {
        return -1;
    }

    auto head = s;
    auto end  = s + s_length;

    loop head + sub_length - 1 < end {
        if *head == *sub {
            // Possible start of substring.
            if memcmp(head, sub, sub_length) == 0 {
                return as(int) (head - s);
            }
        }

        ++head;
    }

    return -1;
}

int find_character(const char* s, int s_length, char c) {
    loop int i : 0..<s_length {
        if s[i] == c {
            return i;
        }
    }
    return -1;
}

int find_last_substring(const char* s, int s_length, const char* sub, int sub_length) {
    if s_length == 0 {
        return s_length - 1;
    }
    if sub_length == 1 {
        return find_last_character(s, s_length, *sub);
    }
    if sub_length > s_length {
        return -1;
    }

    // We go back sub_length because we know any comparisons less than
    // sub_length are are too short.
    auto head  = s + s_length - sub_length;
    auto start = s;

    loop head >= start {
        if *head == *sub {
            // Possible start of substring.
            if memcmp(head, sub, sub_length) == 0 {
                return as(int) (head - s);
            }
        }
        --head;
    }

    return -1;
}

int find_last_character(const char* s, int s_length, char c) {
    loop int i = s_length - 1; i >= 0; --i {
        if s[i] == c {
            return i;
        }
    }
    return -1;
}
