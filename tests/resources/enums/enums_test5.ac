
#if OS_GROUP_WINDOWS

native dllimport fn GetStdHandle(nStdHandle: uint32) -> void*;

native dllimport fn WriteFile(hFile:                  void*,
                              lpBuffer:               const void*,
                              nNumberOfBytesToWrite:  uint32,
                              lpNumberOfBytesWritten: uint32*,
                              lpOverlapped:           void*
                              ) -> int32;

#elif OS_GROUP_UNIX

native fn write(fd: int32, buf: const void*, count: usize) -> isize;

#endif

fn print(s: const char*, length: int) {
#if OS_GROUP_WINDOWS
    handle: void* = GetStdHandle(-11);
    written: uint32;
    WriteFile(handle, s, as(uint32) length, &written, null);
#elif OS_GROUP_UNIX
    write(1, s, as(usize) length);
#endif
}

enum En {
    A = "blah",
    B = "blah",
    C = "blah",
    D = "blah"
}

fn main() {
    {
        e1: En = En.A;
        e2: En = En.B;
        e3: En = En.A;
        if e1 == e2 {
            print("eq1", 3);
        }
        if e1 == e3 {
            print("eq2", 3);
        }
    }
    {
        e1: En = En.A;
        e2: En = En.B;
        e3: En = En.A;
        if e1 != e2 {
            print("neq1", 4);
        }
        if e1 != e3 {
            print("neq2", 4);
        }
    }
}