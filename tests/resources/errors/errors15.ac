import std;
import std.Error;

struct TestError :: *Error {
    const fn get_name() -> const char* {
        return "TestError";
    }
    const fn get_message() -> const char* {
        return "error raised!";
    }
}

fn write_val(val: int) {

#if OS_GROUP_WINDOWS
    handle: void* = std.GetStdHandle(-11);
    written: uint32;
    c: char = as(char) val;
    std.WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    c: char = as(char) val;
    std.write(1, &c, 1);
#endif

}

fn foo() -> int | raises TestError {
    raise TestError{};
}

fn main() {
    a: int = 38;
    a = try (foo()) {
        std.print("caught 1");
        recover 64;
    };

    write_val(a);

    a += try (foo()) {
        std.print("caught 2");
        recover 30;
    };

    write_val(a);

}
