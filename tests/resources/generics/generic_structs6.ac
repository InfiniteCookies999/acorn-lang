
#if OS_GROUP_WINDOWS

native dllimport fn GetStdHandle(nStdHandle: uint32) -> void*;

native dllimport fn WriteFile(hFile:                  void*,
                              lpBuffer:               const void*,
                              nNumberOfBytesToWrite:  uint32,
                              lpNumberOfBytesWritten: uint32*,
                              lpOverlapped:           void*
                              ) -> int32;

#elif OS_GROUP_UNIX

native fn write(fd: int32, buf: const void*, count: usize) -> isize;

#endif

fn write_val(val: int) {

#if OS_GROUP_WINDOWS
    handle: void* = GetStdHandle(-11);
    written: uint32;
    c: char = as(char) val;
    WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    c: char = as(char) val;
    write(1, &c, 1);
#endif

}

generics(T)
struct A {
    v1: T;
    v2: T;

    generics(Y)
    fn foo(v1: T, v2: Y) {
        this.v1 = v1;
        this.v2 = as(T)v2;
    }
}

fn main() {

    a1: A(int);
    a1.foo(64, 80.0f);
    write_val(a1.v1);
    write_val(a1.v2);

    a2: A(float);
    a2.foo(64.0f, 80);
    write_val(as(int) a2.v1);
    write_val(as(int) a2.v2);

}
