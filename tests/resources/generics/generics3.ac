
#if OS_GROUP_WINDOWS

native dllimport void* GetStdHandle(uint32 nStdHandle);

native dllimport int32 WriteFile(void*       hFile,
                                 const void* lpBuffer,
                                 uint32      nNumberOfBytesToWrite,
                                 uint32*     lpNumberOfBytesWritten,
                                 void*       lpOverlapped);

#elif OS_GROUP_UNIX

native isize write(int32 fd, const void* buf, usize count);

#endif

void write_val(int val) {

#if OS_GROUP_WINDOWS
    void* handle = GetStdHandle(-11);
    uint32 written;
    char c = as(char) val;
    WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    char c = as(char) val;
    write(1, &c, 1);
#endif

}

generics[T]
T foo(T[4] a, T b) {
    T value = a[0] + a[1] + a[2] + a[3] + b;
    return value;
}

void main() {

    int[4] a1 = [10,12,10,11];
    int r1 = foo(a1, 21);
    write_val(r1);

    // Use 0.5f since additions result in deterministic
    // behavior for IEEE floating points.
    float32[4] a2 = [0.5f, 0.5f, 0.0f, 0.5f];
    float32 r2 = foo(a2, 0.5f);
    int r3 = (as(int) r2) + 35;
    write_val(r3);

}