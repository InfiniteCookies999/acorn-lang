import .win32;

#if OS_GROUP_WINDOWS
import .win32.TIME_ZONE_INFORMATION;
import .win32.DYNAMIC_TIME_ZONE_INFORMATION;
import .win32.TIME_ZONE_VALUE;
import .win32.SYSTEMTIME;
#endif

struct TimeZone {
    String id;
    int    utc_offset;
}

#if OS_GROUP_WINDOWS

const OS_TIMEZONE_ID_LEN = 255;

/*
 * Creates a time zone id relative to the offset from UTC+00:00. The resulting
 * format is GMT(+|-)xx:xx.
 *
 * The use of the acronym GMT specifically has the meaning that there is no
 * daylight savings time and so that is why it is used over say UTC+xx:xx.
 */
void create_gmt_timezone_id(char[OS_TIMEZONE_ID_LEN] id_buffer, int32 bias) {

    int32 offset;
    bool has_sign = bias < 0;
    offset = has_sign ? -bias : +bias;

    if bias != 0 {
        int32 hours   = offset / 60;
        int32 minutes = offset % 60;

        memcpy(id_buffer, "GMT", 3);
        id_buffer[3] = has_sign ? '+' : '-';

        id_buffer[4] = as(char) (hours / 10) + '0';
        id_buffer[5] = as(char) (hours % 10) + '0';
        id_buffer[6] = ':';
        id_buffer[7] = as(char) (minutes / 10) + '0';
        id_buffer[8] = as(char) (minutes % 10) + '0';
        id_buffer[9] = '\0';

    } else {
        strcpy(id_buffer, "GMT");
    }
}

int32 get_registry_wide_timezone_id(void*                      reg_key,
                                    const char16*              value_name1,
                                    const char*                value_name2,
                                    char16[OS_TIMEZONE_ID_LEN] wide_buffer) {

    int32  err_code;
    uint32 reg_value_type; // The data type in the registry value.
    uint32 reg_value;
    uint32 buffer_length;

    buffer_length = sizeof(char16[OS_TIMEZONE_ID_LEN]);
    err_code = win32.RegQueryValueExW(reg_key,
                                      value_name1,
                                      null,
                                      &reg_value_type,
                                      wide_buffer,
                                      &buffer_length);

    if err_code == 0 && reg_value_type == win32.REG_SZ {
        return win32.ERROR_SUCCESS;
    }


    buffer_length = sizeof(char[OS_TIMEZONE_ID_LEN]);
    char[OS_TIMEZONE_ID_LEN] mutlibyte_buffer;
    err_code = win32.RegQueryValueExA(reg_key,
                                      value_name2,
                                      null,
                                      &reg_value_type,
                                      mutlibyte_buffer,
                                      &buffer_length);

    if err_code != 0 {
        return err_code;
    }
    if reg_value_type != win32.REG_SZ {
        return win32.ERROR_BADKEY;
    }


    int32 rlen = win32.MultiByteToWideChar(win32.CP_ACP, win32.MB_ERR_INVALID_CHARS,
                                           mutlibyte_buffer, -1, // -1 means null terminated.
                                           wide_buffer, as(int32) (OS_TIMEZONE_ID_LEN / sizeof(char16)));

    if rlen <= 0 {
        return win32.ERROR_BADKEY;
    }

    return win32.ERROR_SUCCESS;
}

bool try_get_dynamic_timezone_id(char[OS_TIMEZONE_ID_LEN]       id_buffer,
                                 DYNAMIC_TIME_ZONE_INFORMATION* os_dyn_tz_info,
                                 bool*                          found_id,
                                 bool*                          gmt_offset) {

    if win32.GetDynamicTimeZoneInformation(os_dyn_tz_info) == win32.TIME_ZONE_ID_INVALID {
        return false;
    }

    // If `TimeZoneKeyName` is not empty then the time zone was found with dynamic time zone information.
    // It will be used as long it actually uses dynamic daylight savings otherwise if it is disabled then
    // a simple relative offset timezone from UTC+00:00 will be used.
    //
    if os_dyn_tz_info.TimeZoneKeyName[0] != 0 {
        *found_id = true;
        if os_dyn_tz_info.DynamicDaylightTimeDisabled == 1 {
            *gmt_offset = true;
            create_gmt_timezone_id(id_buffer, os_dyn_tz_info.Bias);
            return true;
        }
        wide_to_multibyte(id_buffer, OS_TIMEZONE_ID_LEN, os_dyn_tz_info.TimeZoneKeyName);
    }

    return true;
}

bool try_get_timezone_id(char[OS_TIMEZONE_ID_LEN] id_buffer, bool* gmt_offset) {

    TIME_ZONE_INFORMATION os_tz_info;
    if win32.GetTimeZoneInformation(&os_tz_info) == win32.TIME_ZONE_ID_INVALID {
        return false;
    }

    // It is still possible that even if `GetDynamicTimeZoneInformation` that the user may
    // still have the registry entry of `DynamicDaylightTimeDisabled` set to true and the
    // system still uses DST. If it is disabled and there is not static daylight savings
    // then a GMT offset id will be created instead. Otherwise this function will try
    // to enumerate the time zones in the registry to determine which one matches the
    // appropriate daylight savings settings.
    //
    const OS_TZ_INFO_KEY_PATH = "System\\CurrentControlSet\\Control\\TimeZoneInformation";
    bool reg_err = false;

    // This is the name of the time zone that the user has specified they want to use
    // on the current system. It will later be used to find the matching time zone entry
    // in the registry.
    //
    char16[OS_TIMEZONE_ID_LEN] sys_timezone_id = ---;

    void*  reg_key;
    uint32 reg_value_type; // The data type in the registry value.
    uint32 reg_value;
    reg_err = win32.RegOpenKeyExA(win32.HKEY_LOCAL_MACHINE,
                                    OS_TZ_INFO_KEY_PATH,
                                    0,
                                    win32.KEY_READ,
                                    &reg_key) != 0;
    if !reg_err {
        {
            uint32 reg_buffer_size = sizeof(uint32);
            reg_err = win32.RegQueryValueExA(reg_key,
                                             "DynamicDaylightTimeDisabled",
                                             null,
                                             &reg_value_type,
                                             as(uint8*) &reg_value,
                                             &reg_buffer_size) != 0;
        }

        if !reg_err {
            // Checking to see if the daylight savings time is disabled. If it is
            // also check if there is no static daylight savings time. If there is
            // neither simply use a GMT offset name.
            //
            if reg_value == 1 && os_tz_info.DaylightDate.wMonth != 0 {
                win32.RegCloseKey(reg_key);
                *gmt_offset = true;
                create_gmt_timezone_id(id_buffer, os_tz_info.Bias);
                return true;
            }
        }

        if os_tz_info.StandardName[0] == 0 {
            reg_err = get_registry_wide_timezone_id(reg_key,
                                                    "StandardName",
                                                    "StandardName",
                                                    sys_timezone_id) != 0;
            win32.RegCloseKey(reg_key); // Done with "TimeZoneInformation" key.

            if reg_err {
                return false;
            }
        }
    }


    // Opening up the "Time Zones" registry to iterate through the different time zones
    // and to find the appropriate matching time zone.
    //
    const OS_NT_TZ_KEY_PATH  = "System\\CurrentControlSet\\Control\\TimeZoneInformation";
    const OS_WIN_TZ_KEY_PATH = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Time Zones";
    reg_err = win32.RegOpenKeyExA(win32.HKEY_LOCAL_MACHINE,
                                  OS_NT_TZ_KEY_PATH,
                                  0,
                                  win32.KEY_READ,
                                  &reg_key) != 0;
    if !reg_err {
        reg_err = win32.RegOpenKeyExA(win32.HKEY_LOCAL_MACHINE,
                                      OS_WIN_TZ_KEY_PATH,
                                      0,
                                      win32.KEY_READ,
                                      &reg_key) != 0;
        if reg_err {
            // Failed for both keys so giving up!
            return false;
        }
    }

    // Get the number of subkeys
    uint32 num_sub_keys;
    reg_err = win32.RegQueryInfoKeyA(reg_key, null, null, null, &num_sub_keys,
                                     null, null, null, null, null, null, null) != 0;
    if reg_err {
        // Failed to find the time zones subkeys count so giving up.
        win32.RegCloseKey(reg_key);
        return false;
    }

    // Iterate through the time zones and find the matching identifier.
    //
    loop uint32 i : 0..<num_sub_keys {

        char[OS_TIMEZONE_ID_LEN]   sub_key_name        = ---;
        char16[OS_TIMEZONE_ID_LEN] sub_key_timezone_id = ---;

        uint32 reg_buffer_size = sizeof(uint32);

        reg_err = win32.RegEnumKeyExA(reg_key, i, sub_key_name, &reg_buffer_size, null, null, null, null) != 0;
        if reg_err {
            break;
        }

        void* reg_sub_key;
        reg_err = win32.RegOpenKeyExA(reg_key, sub_key_name, 0, win32.KEY_READ, &reg_sub_key) != 0;
        if reg_err {
            break;
        }

        reg_err = get_registry_wide_timezone_id(reg_sub_key,
                                                "Std",
                                                "Std",
                                                sub_key_timezone_id) != 0;
        if reg_err {
            win32.RegCloseKey(reg_sub_key);
            // Try and get the subkey by the name of the system's timezone.
            reg_err = win32.RegOpenKeyExW(reg_key, sys_timezone_id, 0, win32.KEY_READ, &reg_sub_key) != 0;
            if reg_err {
                break;
            }
        }

        if wide_cmp(sub_key_timezone_id, sys_timezone_id) != 0 {
            win32.RegCloseKey(reg_sub_key);
            continue;
        }

        // Well you might be mistaken and think that if we get here we have a unique
        // name but in actuality different time zones share the same id so need to
        // also check the offsets and daylight savings time.
        //
        TIME_ZONE_VALUE tz_value;
        reg_buffer_size = sizeof(TIME_ZONE_VALUE);
        reg_err = win32.RegQueryValueExA(reg_sub_key,
                                         "TZI",
                                         null,
                                         &reg_value_type,
                                         &tz_value,
                                         &reg_buffer_size) != 0;
        if !reg_err {

            if os_tz_info.Bias != tz_value.bias ||
               memcmp(&os_tz_info.StandardDate, &tz_value.std_date, sizeof(SYSTEMTIME)) != 0
            {
                win32.RegCloseKey(reg_sub_key);
                continue;
            }

            if os_tz_info.DaylightBias != tz_value.daylight_bias ||
               memcmp(&os_tz_info.DaylightDate, &tz_value.daylight_date, sizeof(SYSTEMTIME)) != 0
            {
                win32.RegCloseKey(reg_sub_key);
                continue;
            }

            // Yipppeeeeeee we found the entry!!!
            strcpy(id_buffer, sub_key_name);
            win32.RegCloseKey(reg_key);
            return true;
        }

        // Continue to trying the next entry!
        win32.RegCloseKey(reg_sub_key);
    }

    // Failed to find the matching entry!
    win32.RegCloseKey(reg_key);
    return false;
}

bool get_timezone_id_directly_from_registry(char[OS_TIMEZONE_ID_LEN]             id_buffer,
                                            const DYNAMIC_TIME_ZONE_INFORMATION^ os_dyn_tz_info,
                                            bool*                                gmt_offset) {

    const OS_TZ_INFO_KEY_PATH = "System\\CurrentControlSet\\Control\\TimeZoneInformation";
    void* reg_key;
    bool reg_err;

    uint32 reg_value_type; // The data type in the registry value.
    uint32 reg_daylight_value;
    uint32 reg_buffer_size;

    reg_err = win32.RegOpenKeyExA(win32.HKEY_LOCAL_MACHINE,
                                  OS_TZ_INFO_KEY_PATH,
                                  0,
                                  win32.KEY_READ,
                                  &reg_key) != 0;
    if reg_err {
        return false;
    }

    reg_buffer_size = sizeof(uint32);
    reg_err = win32.RegQueryValueExA(reg_key,
                                     "DynamicDaylightTimeDisabled",
                                     null,
                                     &reg_value_type,
                                     &reg_daylight_value,
                                     &reg_buffer_size) != 0;
    if reg_err {
        win32.RegCloseKey(reg_key);
        return false;
    }

    if reg_daylight_value == 1 {
        // Daylight savings time disabled so creating a timezone as a simple
        // offset from UTC+00:00.
        win32.RegCloseKey(reg_key);
        *gmt_offset = true;
        create_gmt_timezone_id(id_buffer, os_dyn_tz_info.Bias);
        return true;
    }

    reg_buffer_size = sizeof(char[OS_TIMEZONE_ID_LEN]);
    reg_err = win32.RegQueryValueExA(reg_key,
                                     "TimeZoneKeyName",
                                     null,
                                     &reg_value_type,
                                     id_buffer,
                                     &reg_buffer_size) != 0;
    if reg_err {
        win32.RegCloseKey(reg_key);
        return false;
    }

    return true;
}

void get_timezone_id_directly_from_registry_by_bias_only(char[OS_TIMEZONE_ID_LEN] id_buffer) {

    void* reg_key;
    bool reg_err;

    const OS_TZ_INFO_KEY_PATH = "System\\CurrentControlSet\\Control\\TimeZoneInformation";
    reg_err = win32.RegOpenKeyExA(win32.HKEY_LOCAL_MACHINE,
                                  OS_TZ_INFO_KEY_PATH,
                                  0,
                                  win32.KEY_READ,
                                  &reg_key) != 0;

    int32 reg_bias_value;
    if !reg_err {
        uint32 reg_value_type; // The data type in the registry value.

        uint32 reg_buffer_size = sizeof(int32);
        reg_err = win32.RegQueryValueExA(reg_key,
                                         "ActiveTimeBias",
                                         null,
                                         &reg_value_type,
                                         &reg_bias_value,
                                         &reg_buffer_size) != 0;
        if reg_err {
            reg_bias_value = 0;
        }

        win32.RegCloseKey(reg_key);
    } else {
        // "ActiveTimeBias" does not include the current daylight savings and is
        // less accurate.
        TIME_ZONE_INFORMATION os_tz_info;
        if win32.GetTimeZoneInformation(&os_tz_info) != win32.TIME_ZONE_ID_INVALID {
            reg_bias_value = os_tz_info.Bias;
        }
    }

    create_gmt_timezone_id(id_buffer, reg_bias_value);
}

char[OS_TIMEZONE_ID_LEN] get_windows_timezone_id(bool* value_unknown, bool* gmt_offset) {
    // The following code is a way of getting the best possible representable
    // time zone identifier by taking into offsets from UTC and daylight savings
    // time (Including dynamic daylight savings time).
    //
    // Both `GetTimeZoneInformation` and `GetDynamicTimeZoneInformation` are used
    // for getting time zone information but `GetDynamicTimeZoneInformation` is a
    // more modern approach as the data structure it returns is able to adjust
    // daylight savings time by dynamic changes in real life that have consequences
    // on when daylight savings occures. If `GetDynamicTimeZoneInformation` fails
    // and the fallback `GetTimeZoneInformation` is used it may still be able to
    // retrieve information about dynamic daylight savings but if not it may try
    // to use static daylight savings instead.
    //

    char[OS_TIMEZONE_ID_LEN] id_buffer = ---;
    id_buffer[0] = '\0'; // TODO: remove this once proper error handling is in place.

    DYNAMIC_TIME_ZONE_INFORMATION os_dyn_tz_info;
    bool found_id = false;
    if !try_get_dynamic_timezone_id(id_buffer, &os_dyn_tz_info, &found_id, gmt_offset) {
        *value_unknown = true;
        return id_buffer;
    }

    if found_id {
        return id_buffer;
    }

    // Checking if the `StandardName` exists. If it does then it should be possible to fallback
    // and use `GetTimeZoneInformation`. Otherwise the id will attempt to be constructed from the
    // the bias information.
    //
    if os_dyn_tz_info.StandardName[0] != 0 {

        if !try_get_timezone_id(id_buffer, gmt_offset) {
            *value_unknown = true;
            return id_buffer;
        }

        // Successfully obtained an id!
        return id_buffer;
    }

    // `StandardName` is not available. Will try to just read directly from the registry
    // instead.

    if !get_timezone_id_directly_from_registry(id_buffer, os_dyn_tz_info, gmt_offset) {
        *value_unknown = true;
        return id_buffer;
    }

    // Successfully obtained an id!
    return id_buffer;
}

// TODO: This would be better if it used perfect hashing instead of doing a linear
// search. Sadly, simple perfect hashing implementations do not create dense enough
// of a hash table. Luckily there is plenty of research into perfect hashing and so
// one a decent perfect hashing algorithm has been implemented this should be converted.
//
// Additional considerations:
//
// 1) Java will use 001 as a fallback region code and so if a perfect hash is
//    used it must also take into account the fallback.
//
// 2) Because java may add new timezones before the perfect hash has been updated it
//    would then be possible that there would be collisions so any solution if possible
//    would have to take that into account.
//
// This is a conversion from Java's tz_mapping file and must be periodically updated.
const windows_timezone_names = [
    "AUS Central Standard Time:AU",
    "AUS Central Standard Time:001",
    "AUS Eastern Standard Time:AU",
    "AUS Eastern Standard Time:001",
    "Afghanistan Standard Time:AF",
    "Afghanistan Standard Time:001",
    "Alaskan Standard Time:US",
    "Alaskan Standard Time:001",
    "Aleutian Standard Time:US",
    "Aleutian Standard Time:001",
    "Altai Standard Time:RU",
    "Altai Standard Time:001",
    "Arab Standard Time:BH",
    "Arab Standard Time:KW",
    "Arab Standard Time:QA",
    "Arab Standard Time:SA",
    "Arab Standard Time:YE",
    "Arab Standard Time:001",
    "Arabian Standard Time:AE",
    "Arabian Standard Time:OM",
    "Arabian Standard Time:ZZ",
    "Arabian Standard Time:001",
    "Arabic Standard Time:IQ",
    "Arabic Standard Time:001",
    "Argentina Standard Time:AR",
    "Argentina Standard Time:001",
    "Astrakhan Standard Time:RU",
    "Astrakhan Standard Time:001",
    "Atlantic Standard Time:BM",
    "Atlantic Standard Time:CA",
    "Atlantic Standard Time:GL",
    "Atlantic Standard Time:001",
    "Aus Central W. Standard Time:AU",
    "Aus Central W. Standard Time:001",
    "Azerbaijan Standard Time:AZ",
    "Azerbaijan Standard Time:001",
    "Azores Standard Time:GL",
    "Azores Standard Time:PT",
    "Azores Standard Time:001",
    "Bahia Standard Time:BR",
    "Bahia Standard Time:001",
    "Bangladesh Standard Time:BD",
    "Bangladesh Standard Time:BT",
    "Bangladesh Standard Time:001",
    "Belarus Standard Time:BY",
    "Belarus Standard Time:001",
    "Bougainville Standard Time:PG",
    "Bougainville Standard Time:001",
    "Canada Central Standard Time:CA",
    "Canada Central Standard Time:001",
    "Cape Verde Standard Time:CV",
    "Cape Verde Standard Time:ZZ",
    "Cape Verde Standard Time:001",
    "Caucasus Standard Time:AM",
    "Caucasus Standard Time:001",
    "Cen. Australia Standard Time:AU",
    "Cen. Australia Standard Time:001",
    "Central America Standard Time:BZ",
    "Central America Standard Time:CR",
    "Central America Standard Time:EC",
    "Central America Standard Time:GT",
    "Central America Standard Time:HN",
    "Central America Standard Time:NI",
    "Central America Standard Time:SV",
    "Central America Standard Time:ZZ",
    "Central America Standard Time:001",
    "Central Asia Standard Time:AQ",
    "Central Asia Standard Time:CN",
    "Central Asia Standard Time:IO",
    "Central Asia Standard Time:KG",
    "Central Asia Standard Time:KZ",
    "Central Asia Standard Time:ZZ",
    "Central Asia Standard Time:001",
    "Central Brazilian Standard Time:BR",
    "Central Brazilian Standard Time:001",
    "Central Europe Standard Time:AL",
    "Central Europe Standard Time:CZ",
    "Central Europe Standard Time:HU",
    "Central Europe Standard Time:ME",
    "Central Europe Standard Time:RS",
    "Central Europe Standard Time:SI",
    "Central Europe Standard Time:SK",
    "Central Europe Standard Time:001",
    "Central European Standard Time:BA",
    "Central European Standard Time:HR",
    "Central European Standard Time:MK",
    "Central European Standard Time:PL",
    "Central European Standard Time:001",
    "Central Pacific Standard Time:AQ",
    "Central Pacific Standard Time:FM",
    "Central Pacific Standard Time:NC",
    "Central Pacific Standard Time:SB",
    "Central Pacific Standard Time:VU",
    "Central Pacific Standard Time:ZZ",
    "Central Pacific Standard Time:001",
    "Central Standard Time:CA",
    "Central Standard Time:MX",
    "Central Standard Time:US",
    "Central Standard Time:ZZ",
    "Central Standard Time:001",
    "Central Standard Time (Mexico):MX",
    "Central Standard Time (Mexico):001",
    "Chatham Islands Standard Time:NZ",
    "Chatham Islands Standard Time:001",
    "China Standard Time:CN",
    "China Standard Time:HK",
    "China Standard Time:MO",
    "China Standard Time:001",
    "Cuba Standard Time:CU",
    "Cuba Standard Time:001",
    "Dateline Standard Time:ZZ",
    "Dateline Standard Time:001",
    "E. Africa Standard Time:AQ",
    "E. Africa Standard Time:DJ",
    "E. Africa Standard Time:ER",
    "E. Africa Standard Time:ET",
    "E. Africa Standard Time:KE",
    "E. Africa Standard Time:KM",
    "E. Africa Standard Time:MG",
    "E. Africa Standard Time:SO",
    "E. Africa Standard Time:TZ",
    "E. Africa Standard Time:UG",
    "E. Africa Standard Time:YT",
    "E. Africa Standard Time:ZZ",
    "E. Africa Standard Time:001",
    "E. Australia Standard Time:AU",
    "E. Australia Standard Time:001",
    "E. Europe Standard Time:MD",
    "E. Europe Standard Time:001",
    "E. South America Standard Time:BR",
    "E. South America Standard Time:001",
    "Easter Island Standard Time:CL",
    "Easter Island Standard Time:001",
    "Eastern Standard Time:BS",
    "Eastern Standard Time:CA",
    "Eastern Standard Time:US",
    "Eastern Standard Time:ZZ",
    "Eastern Standard Time:001",
    "Eastern Standard Time (Mexico):MX",
    "Eastern Standard Time (Mexico):001",
    "Egypt Standard Time:EG",
    "Egypt Standard Time:001",
    "Ekaterinburg Standard Time:RU",
    "Ekaterinburg Standard Time:001",
    "FLE Standard Time:AX",
    "FLE Standard Time:BG",
    "FLE Standard Time:EE",
    "FLE Standard Time:FI",
    "FLE Standard Time:LT",
    "FLE Standard Time:LV",
    "FLE Standard Time:UA",
    "FLE Standard Time:001",
    "Fiji Standard Time:FJ",
    "Fiji Standard Time:001",
    "GMT Standard Time:ES",
    "GMT Standard Time:FO",
    "GMT Standard Time:GB",
    "GMT Standard Time:GG",
    "GMT Standard Time:IE",
    "GMT Standard Time:IM",
    "GMT Standard Time:JE",
    "GMT Standard Time:PT",
    "GMT Standard Time:001",
    "GTB Standard Time:CY",
    "GTB Standard Time:GR",
    "GTB Standard Time:RO",
    "GTB Standard Time:001",
    "Georgian Standard Time:GE",
    "Georgian Standard Time:001",
    "Greenland Standard Time:GL",
    "Greenland Standard Time:001",
    "Greenwich Standard Time:BF",
    "Greenwich Standard Time:CI",
    "Greenwich Standard Time:GH",
    "Greenwich Standard Time:GL",
    "Greenwich Standard Time:GM",
    "Greenwich Standard Time:GN",
    "Greenwich Standard Time:GW",
    "Greenwich Standard Time:IS",
    "Greenwich Standard Time:LR",
    "Greenwich Standard Time:ML",
    "Greenwich Standard Time:MR",
    "Greenwich Standard Time:SH",
    "Greenwich Standard Time:SL",
    "Greenwich Standard Time:SN",
    "Greenwich Standard Time:TG",
    "Greenwich Standard Time:001",
    "Haiti Standard Time:HT",
    "Haiti Standard Time:001",
    "Hawaiian Standard Time:CK",
    "Hawaiian Standard Time:PF",
    "Hawaiian Standard Time:UM",
    "Hawaiian Standard Time:US",
    "Hawaiian Standard Time:ZZ",
    "Hawaiian Standard Time:001",
    "India Standard Time:IN",
    "India Standard Time:001",
    "Iran Standard Time:IR",
    "Iran Standard Time:001",
    "Israel Standard Time:IL",
    "Israel Standard Time:001",
    "Jordan Standard Time:JO",
    "Jordan Standard Time:001",
    "Kaliningrad Standard Time:RU",
    "Kaliningrad Standard Time:001",
    "Korea Standard Time:KR",
    "Korea Standard Time:001",
    "Libya Standard Time:LY",
    "Libya Standard Time:001",
    "Line Islands Standard Time:KI",
    "Line Islands Standard Time:ZZ",
    "Line Islands Standard Time:001",
    "Lord Howe Standard Time:AU",
    "Lord Howe Standard Time:001",
    "Magadan Standard Time:RU",
    "Magadan Standard Time:001",
    "Magallanes Standard Time:CL",
    "Magallanes Standard Time:001",
    "Marquesas Standard Time:PF",
    "Marquesas Standard Time:001",
    "Mauritius Standard Time:MU",
    "Mauritius Standard Time:RE",
    "Mauritius Standard Time:SC",
    "Mauritius Standard Time:001",
    "Middle East Standard Time:LB",
    "Middle East Standard Time:001",
    "Montevideo Standard Time:UY",
    "Montevideo Standard Time:001",
    "Morocco Standard Time:EH",
    "Morocco Standard Time:MA",
    "Morocco Standard Time:001",
    "Mountain Standard Time:CA",
    "Mountain Standard Time:MX",
    "Mountain Standard Time:US",
    "Mountain Standard Time:ZZ",
    "Mountain Standard Time:001",
    "Mountain Standard Time (Mexico):MX",
    "Mountain Standard Time (Mexico):001",
    "Myanmar Standard Time:CC",
    "Myanmar Standard Time:MM",
    "Myanmar Standard Time:001",
    "N. Central Asia Standard Time:RU",
    "N. Central Asia Standard Time:001",
    "Namibia Standard Time:NA",
    "Namibia Standard Time:001",
    "Nepal Standard Time:NP",
    "Nepal Standard Time:001",
    "New Zealand Standard Time:AQ",
    "New Zealand Standard Time:NZ",
    "New Zealand Standard Time:001",
    "Newfoundland Standard Time:CA",
    "Newfoundland Standard Time:001",
    "Norfolk Standard Time:NF",
    "Norfolk Standard Time:001",
    "North Asia East Standard Time:RU",
    "North Asia East Standard Time:001",
    "North Asia Standard Time:RU",
    "North Asia Standard Time:001",
    "North Korea Standard Time:KP",
    "North Korea Standard Time:001",
    "Omsk Standard Time:RU",
    "Omsk Standard Time:001",
    "Pacific SA Standard Time:CL",
    "Pacific SA Standard Time:001",
    "Pacific Standard Time:CA",
    "Pacific Standard Time:US",
    "Pacific Standard Time:ZZ",
    "Pacific Standard Time:001",
    "Pacific Standard Time (Mexico):MX",
    "Pacific Standard Time (Mexico):001",
    "Pakistan Standard Time:PK",
    "Pakistan Standard Time:001",
    "Paraguay Standard Time:PY",
    "Paraguay Standard Time:001",
    "Qyzylorda Standard Time:KZ",
    "Qyzylorda Standard Time:001",
    "Romance Standard Time:BE",
    "Romance Standard Time:DK",
    "Romance Standard Time:ES",
    "Romance Standard Time:FR",
    "Romance Standard Time:001",
    "Russia Time Zone 10:RU",
    "Russia Time Zone 10:001",
    "Russia Time Zone 11:RU",
    "Russia Time Zone 11:001",
    "Russia Time Zone 3:RU",
    "Russia Time Zone 3:001",
    "Russian Standard Time:RU",
    "Russian Standard Time:UA",
    "Russian Standard Time:001",
    "SA Eastern Standard Time:AQ",
    "SA Eastern Standard Time:BR",
    "SA Eastern Standard Time:FK",
    "SA Eastern Standard Time:GF",
    "SA Eastern Standard Time:SR",
    "SA Eastern Standard Time:ZZ",
    "SA Eastern Standard Time:001",
    "SA Pacific Standard Time:BR",
    "SA Pacific Standard Time:CA",
    "SA Pacific Standard Time:CO",
    "SA Pacific Standard Time:EC",
    "SA Pacific Standard Time:JM",
    "SA Pacific Standard Time:KY",
    "SA Pacific Standard Time:PA",
    "SA Pacific Standard Time:PE",
    "SA Pacific Standard Time:ZZ",
    "SA Pacific Standard Time:001",
    "SA Western Standard Time:AG",
    "SA Western Standard Time:AI",
    "SA Western Standard Time:AW",
    "SA Western Standard Time:BB",
    "SA Western Standard Time:BL",
    "SA Western Standard Time:BO",
    "SA Western Standard Time:BQ",
    "SA Western Standard Time:BR",
    "SA Western Standard Time:CA",
    "SA Western Standard Time:CW",
    "SA Western Standard Time:DM",
    "SA Western Standard Time:DO",
    "SA Western Standard Time:GD",
    "SA Western Standard Time:GP",
    "SA Western Standard Time:GY",
    "SA Western Standard Time:KN",
    "SA Western Standard Time:LC",
    "SA Western Standard Time:MF",
    "SA Western Standard Time:MQ",
    "SA Western Standard Time:MS",
    "SA Western Standard Time:PR",
    "SA Western Standard Time:SX",
    "SA Western Standard Time:TT",
    "SA Western Standard Time:VC",
    "SA Western Standard Time:VG",
    "SA Western Standard Time:VI",
    "SA Western Standard Time:ZZ",
    "SA Western Standard Time:001",
    "SE Asia Standard Time:AQ",
    "SE Asia Standard Time:CX",
    "SE Asia Standard Time:ID",
    "SE Asia Standard Time:KH",
    "SE Asia Standard Time:LA",
    "SE Asia Standard Time:TH",
    "SE Asia Standard Time:VN",
    "SE Asia Standard Time:ZZ",
    "SE Asia Standard Time:001",
    "Saint Pierre Standard Time:PM",
    "Saint Pierre Standard Time:001",
    "Sakhalin Standard Time:RU",
    "Sakhalin Standard Time:001",
    "Samoa Standard Time:WS",
    "Samoa Standard Time:001",
    "Sao Tome Standard Time:ST",
    "Sao Tome Standard Time:001",
    "Saratov Standard Time:RU",
    "Saratov Standard Time:001",
    "Singapore Standard Time:BN",
    "Singapore Standard Time:ID",
    "Singapore Standard Time:MY",
    "Singapore Standard Time:PH",
    "Singapore Standard Time:SG",
    "Singapore Standard Time:ZZ",
    "Singapore Standard Time:001",
    "South Africa Standard Time:BI",
    "South Africa Standard Time:BW",
    "South Africa Standard Time:CD",
    "South Africa Standard Time:LS",
    "South Africa Standard Time:MW",
    "South Africa Standard Time:MZ",
    "South Africa Standard Time:RW",
    "South Africa Standard Time:SZ",
    "South Africa Standard Time:ZA",
    "South Africa Standard Time:ZM",
    "South Africa Standard Time:ZW",
    "South Africa Standard Time:ZZ",
    "South Africa Standard Time:001",
    "South Sudan Standard Time:SS",
    "South Sudan Standard Time:001",
    "Sri Lanka Standard Time:LK",
    "Sri Lanka Standard Time:001",
    "Sudan Standard Time:SD",
    "Sudan Standard Time:001",
    "Syria Standard Time:SY",
    "Syria Standard Time:001",
    "Taipei Standard Time:TW",
    "Taipei Standard Time:001",
    "Tasmania Standard Time:AU",
    "Tasmania Standard Time:001",
    "Tocantins Standard Time:BR",
    "Tocantins Standard Time:001",
    "Tokyo Standard Time:ID",
    "Tokyo Standard Time:JP",
    "Tokyo Standard Time:PW",
    "Tokyo Standard Time:TL",
    "Tokyo Standard Time:ZZ",
    "Tokyo Standard Time:001",
    "Tomsk Standard Time:RU",
    "Tomsk Standard Time:001",
    "Tonga Standard Time:TO",
    "Tonga Standard Time:001",
    "Transbaikal Standard Time:RU",
    "Transbaikal Standard Time:001",
    "Turkey Standard Time:TR",
    "Turkey Standard Time:001",
    "Turks And Caicos Standard Time:TC",
    "Turks And Caicos Standard Time:001",
    "US Eastern Standard Time:US",
    "US Eastern Standard Time:001",
    "US Mountain Standard Time:CA",
    "US Mountain Standard Time:MX",
    "US Mountain Standard Time:US",
    "US Mountain Standard Time:ZZ",
    "US Mountain Standard Time:001",
    "UTC:ZZ",
    "UTC:001",
    "UTC+12:KI",
    "UTC+12:MH",
    "UTC+12:NR",
    "UTC+12:TV",
    "UTC+12:UM",
    "UTC+12:WF",
    "UTC+12:ZZ",
    "UTC+12:001",
    "UTC+13:KI",
    "UTC+13:TK",
    "UTC+13:ZZ",
    "UTC+13:001",
    "UTC-02:BR",
    "UTC-02:GS",
    "UTC-02:ZZ",
    "UTC-02:001",
    "UTC-08:PN",
    "UTC-08:ZZ",
    "UTC-08:001",
    "UTC-09:PF",
    "UTC-09:ZZ",
    "UTC-09:001",
    "UTC-11:AS",
    "UTC-11:NU",
    "UTC-11:UM",
    "UTC-11:ZZ",
    "UTC-11:001",
    "Ulaanbaatar Standard Time:MN",
    "Ulaanbaatar Standard Time:001",
    "Venezuela Standard Time:VE",
    "Venezuela Standard Time:001",
    "Vladivostok Standard Time:RU",
    "Vladivostok Standard Time:001",
    "Volgograd Standard Time:RU",
    "Volgograd Standard Time:001",
    "W. Australia Standard Time:AU",
    "W. Australia Standard Time:001",
    "W. Central Africa Standard Time:AO",
    "W. Central Africa Standard Time:BJ",
    "W. Central Africa Standard Time:CD",
    "W. Central Africa Standard Time:CF",
    "W. Central Africa Standard Time:CG",
    "W. Central Africa Standard Time:CM",
    "W. Central Africa Standard Time:DZ",
    "W. Central Africa Standard Time:GA",
    "W. Central Africa Standard Time:GQ",
    "W. Central Africa Standard Time:NE",
    "W. Central Africa Standard Time:NG",
    "W. Central Africa Standard Time:TD",
    "W. Central Africa Standard Time:TN",
    "W. Central Africa Standard Time:ZZ",
    "W. Central Africa Standard Time:001",
    "W. Europe Standard Time:AD",
    "W. Europe Standard Time:AT",
    "W. Europe Standard Time:CH",
    "W. Europe Standard Time:DE",
    "W. Europe Standard Time:GI",
    "W. Europe Standard Time:IT",
    "W. Europe Standard Time:LI",
    "W. Europe Standard Time:LU",
    "W. Europe Standard Time:MC",
    "W. Europe Standard Time:MT",
    "W. Europe Standard Time:NL",
    "W. Europe Standard Time:NO",
    "W. Europe Standard Time:SE",
    "W. Europe Standard Time:SJ",
    "W. Europe Standard Time:SM",
    "W. Europe Standard Time:VA",
    "W. Europe Standard Time:001",
    "W. Mongolia Standard Time:MN",
    "W. Mongolia Standard Time:001",
    "West Asia Standard Time:AQ",
    "West Asia Standard Time:KZ",
    "West Asia Standard Time:MV",
    "West Asia Standard Time:TF",
    "West Asia Standard Time:TJ",
    "West Asia Standard Time:TM",
    "West Asia Standard Time:UZ",
    "West Asia Standard Time:ZZ",
    "West Asia Standard Time:001",
    "West Bank Standard Time:PS",
    "West Bank Standard Time:001",
    "West Pacific Standard Time:AQ",
    "West Pacific Standard Time:FM",
    "West Pacific Standard Time:GU",
    "West Pacific Standard Time:MP",
    "West Pacific Standard Time:PG",
    "West Pacific Standard Time:ZZ",
    "West Pacific Standard Time:001",
    "Yakutsk Standard Time:RU",
    "Yakutsk Standard Time:001",
    "Yukon Standard Time:CA",
    "Yukon Standard Time:001",
];

const windows_timezones_mapping = [
    "Australia/Darwin",
    "Australia/Darwin",
    "Australia/Sydney",
    "Australia/Sydney",
    "Asia/Kabul",
    "Asia/Kabul",
    "America/Anchorage",
    "America/Anchorage",
    "America/Adak",
    "America/Adak",
    "Asia/Barnaul",
    "Asia/Barnaul",
    "Asia/Bahrain",
    "Asia/Kuwait",
    "Asia/Qatar",
    "Asia/Riyadh",
    "Asia/Aden",
    "Asia/Riyadh",
    "Asia/Dubai",
    "Asia/Muscat",
    "Etc/GMT-4",
    "Asia/Dubai",
    "Asia/Baghdad",
    "Asia/Baghdad",
    "America/Buenos_Aires",
    "America/Buenos_Aires",
    "Europe/Astrakhan",
    "Europe/Astrakhan",
    "Atlantic/Bermuda",
    "America/Halifax",
    "America/Thule",
    "America/Halifax",
    "Australia/Eucla",
    "Australia/Eucla",
    "Asia/Baku",
    "Asia/Baku",
    "America/Scoresbysund",
    "Atlantic/Azores",
    "Atlantic/Azores",
    "America/Bahia",
    "America/Bahia",
    "Asia/Dhaka",
    "Asia/Thimphu",
    "Asia/Dhaka",
    "Europe/Minsk",
    "Europe/Minsk",
    "Pacific/Bougainville",
    "Pacific/Bougainville",
    "America/Regina",
    "America/Regina",
    "Atlantic/Cape_Verde",
    "Etc/GMT+1",
    "Atlantic/Cape_Verde",
    "Asia/Yerevan",
    "Asia/Yerevan",
    "Australia/Adelaide",
    "Australia/Adelaide",
    "America/Belize",
    "America/Costa_Rica",
    "Pacific/Galapagos",
    "America/Guatemala",
    "America/Tegucigalpa",
    "America/Managua",
    "America/El_Salvador",
    "Etc/GMT+6",
    "America/Guatemala",
    "Antarctica/Vostok",
    "Asia/Urumqi",
    "Indian/Chagos",
    "Asia/Bishkek",
    "Asia/Almaty",
    "Etc/GMT-6",
    "Asia/Almaty",
    "America/Cuiaba",
    "America/Cuiaba",
    "Europe/Tirane",
    "Europe/Prague",
    "Europe/Budapest",
    "Europe/Podgorica",
    "Europe/Belgrade",
    "Europe/Ljubljana",
    "Europe/Bratislava",
    "Europe/Budapest",
    "Europe/Sarajevo",
    "Europe/Zagreb",
    "Europe/Skopje",
    "Europe/Warsaw",
    "Europe/Warsaw",
    "Antarctica/Casey",
    "Pacific/Ponape",
    "Pacific/Noumea",
    "Pacific/Guadalcanal",
    "Pacific/Efate",
    "Etc/GMT-11",
    "Pacific/Guadalcanal",
    "America/Winnipeg",
    "America/Matamoros",
    "America/Chicago",
    "CST6CDT",
    "America/Chicago",
    "America/Mexico_City",
    "America/Mexico_City",
    "Pacific/Chatham",
    "Pacific/Chatham",
    "Asia/Shanghai",
    "Asia/Hong_Kong",
    "Asia/Macau",
    "Asia/Shanghai",
    "America/Havana",
    "America/Havana",
    "Etc/GMT+12",
    "Etc/GMT+12",
    "Antarctica/Syowa",
    "Africa/Djibouti",
    "Africa/Asmera",
    "Africa/Addis_Ababa",
    "Africa/Nairobi",
    "Indian/Comoro",
    "Indian/Antananarivo",
    "Africa/Mogadishu",
    "Africa/Dar_es_Salaam",
    "Africa/Kampala",
    "Indian/Mayotte",
    "Etc/GMT-3",
    "Africa/Nairobi",
    "Australia/Brisbane",
    "Australia/Brisbane",
    "Europe/Chisinau",
    "Europe/Chisinau",
    "America/Sao_Paulo",
    "America/Sao_Paulo",
    "Pacific/Easter",
    "Pacific/Easter",
    "America/Nassau",
    "America/Toronto",
    "America/New_York",
    "EST5EDT",
    "America/New_York",
    "America/Cancun",
    "America/Cancun",
    "Africa/Cairo",
    "Africa/Cairo",
    "Asia/Yekaterinburg",
    "Asia/Yekaterinburg",
    "Europe/Mariehamn",
    "Europe/Sofia",
    "Europe/Tallinn",
    "Europe/Helsinki",
    "Europe/Vilnius",
    "Europe/Riga",
    "Europe/Kiev",
    "Europe/Kiev",
    "Pacific/Fiji",
    "Pacific/Fiji",
    "Atlantic/Canary",
    "Atlantic/Faeroe",
    "Europe/London",
    "Europe/Guernsey",
    "Europe/Dublin",
    "Europe/Isle_of_Man",
    "Europe/Jersey",
    "Europe/Lisbon",
    "Europe/London",
    "Asia/Nicosia",
    "Europe/Athens",
    "Europe/Bucharest",
    "Europe/Bucharest",
    "Asia/Tbilisi",
    "Asia/Tbilisi",
    "America/Godthab",
    "America/Godthab",
    "Africa/Ouagadougou",
    "Africa/Abidjan",
    "Africa/Accra",
    "America/Danmarkshavn",
    "Africa/Banjul",
    "Africa/Conakry",
    "Africa/Bissau",
    "Atlantic/Reykjavik",
    "Africa/Monrovia",
    "Africa/Bamako",
    "Africa/Nouakchott",
    "Atlantic/St_Helena",
    "Africa/Freetown",
    "Africa/Dakar",
    "Africa/Lome",
    "Atlantic/Reykjavik",
    "America/Port-au-Prince",
    "America/Port-au-Prince",
    "Pacific/Rarotonga",
    "Pacific/Tahiti",
    "Pacific/Johnston",
    "Pacific/Honolulu",
    "Etc/GMT+10",
    "Pacific/Honolulu",
    "Asia/Calcutta",
    "Asia/Calcutta",
    "Asia/Tehran",
    "Asia/Tehran",
    "Asia/Jerusalem",
    "Asia/Jerusalem",
    "Asia/Amman",
    "Asia/Amman",
    "Europe/Kaliningrad",
    "Europe/Kaliningrad",
    "Asia/Seoul",
    "Asia/Seoul",
    "Africa/Tripoli",
    "Africa/Tripoli",
    "Pacific/Kiritimati",
    "Etc/GMT-14",
    "Pacific/Kiritimati",
    "Australia/Lord_Howe",
    "Australia/Lord_Howe",
    "Asia/Magadan",
    "Asia/Magadan",
    "America/Punta_Arenas",
    "America/Punta_Arenas",
    "Pacific/Marquesas",
    "Pacific/Marquesas",
    "Indian/Mauritius",
    "Indian/Reunion",
    "Indian/Mahe",
    "Indian/Mauritius",
    "Asia/Beirut",
    "Asia/Beirut",
    "America/Montevideo",
    "America/Montevideo",
    "Africa/El_Aaiun",
    "Africa/Casablanca",
    "Africa/Casablanca",
    "America/Edmonton",
    "America/Ciudad_Juarez",
    "America/Denver",
    "MST7MDT",
    "America/Denver",
    "America/Mazatlan",
    "America/Mazatlan",
    "Indian/Cocos",
    "Asia/Rangoon",
    "Asia/Rangoon",
    "Asia/Novosibirsk",
    "Asia/Novosibirsk",
    "Africa/Windhoek",
    "Africa/Windhoek",
    "Asia/Katmandu",
    "Asia/Katmandu",
    "Antarctica/McMurdo",
    "Pacific/Auckland",
    "Pacific/Auckland",
    "America/St_Johns",
    "America/St_Johns",
    "Pacific/Norfolk",
    "Pacific/Norfolk",
    "Asia/Irkutsk",
    "Asia/Irkutsk",
    "Asia/Krasnoyarsk",
    "Asia/Krasnoyarsk",
    "Asia/Pyongyang",
    "Asia/Pyongyang",
    "Asia/Omsk",
    "Asia/Omsk",
    "America/Santiago",
    "America/Santiago",
    "America/Vancouver",
    "America/Los_Angeles",
    "PST8PDT",
    "America/Los_Angeles",
    "America/Tijuana",
    "America/Tijuana",
    "Asia/Karachi",
    "Asia/Karachi",
    "America/Asuncion",
    "America/Asuncion",
    "Asia/Qyzylorda",
    "Asia/Qyzylorda",
    "Europe/Brussels",
    "Europe/Copenhagen",
    "Europe/Madrid",
    "Europe/Paris",
    "Europe/Paris",
    "Asia/Srednekolymsk",
    "Asia/Srednekolymsk",
    "Asia/Kamchatka",
    "Asia/Kamchatka",
    "Europe/Samara",
    "Europe/Samara",
    "Europe/Moscow",
    "Europe/Simferopol",
    "Europe/Moscow",
    "Antarctica/Rothera",
    "America/Fortaleza",
    "Atlantic/Stanley",
    "America/Cayenne",
    "America/Paramaribo",
    "Etc/GMT+3",
    "America/Cayenne",
    "America/Rio_Branco",
    "America/Coral_Harbour",
    "America/Bogota",
    "America/Guayaquil",
    "America/Jamaica",
    "America/Cayman",
    "America/Panama",
    "America/Lima",
    "Etc/GMT+5",
    "America/Bogota",
    "America/Antigua",
    "America/Anguilla",
    "America/Aruba",
    "America/Barbados",
    "America/St_Barthelemy",
    "America/La_Paz",
    "America/Kralendijk",
    "America/Manaus",
    "America/Blanc-Sablon",
    "America/Curacao",
    "America/Dominica",
    "America/Santo_Domingo",
    "America/Grenada",
    "America/Guadeloupe",
    "America/Guyana",
    "America/St_Kitts",
    "America/St_Lucia",
    "America/Marigot",
    "America/Martinique",
    "America/Montserrat",
    "America/Puerto_Rico",
    "America/Lower_Princes",
    "America/Port_of_Spain",
    "America/St_Vincent",
    "America/Tortola",
    "America/St_Thomas",
    "Etc/GMT+4",
    "America/La_Paz",
    "Antarctica/Davis",
    "Indian/Christmas",
    "Asia/Jakarta",
    "Asia/Phnom_Penh",
    "Asia/Vientiane",
    "Asia/Bangkok",
    "Asia/Saigon",
    "Etc/GMT-7",
    "Asia/Bangkok",
    "America/Miquelon",
    "America/Miquelon",
    "Asia/Sakhalin",
    "Asia/Sakhalin",
    "Pacific/Apia",
    "Pacific/Apia",
    "Africa/Sao_Tome",
    "Africa/Sao_Tome",
    "Europe/Saratov",
    "Europe/Saratov",
    "Asia/Brunei",
    "Asia/Makassar",
    "Asia/Kuala_Lumpur",
    "Asia/Manila",
    "Asia/Singapore",
    "Etc/GMT-8",
    "Asia/Singapore",
    "Africa/Bujumbura",
    "Africa/Gaborone",
    "Africa/Lubumbashi",
    "Africa/Maseru",
    "Africa/Blantyre",
    "Africa/Maputo",
    "Africa/Kigali",
    "Africa/Mbabane",
    "Africa/Johannesburg",
    "Africa/Lusaka",
    "Africa/Harare",
    "Etc/GMT-2",
    "Africa/Johannesburg",
    "Africa/Juba",
    "Africa/Juba",
    "Asia/Colombo",
    "Asia/Colombo",
    "Africa/Khartoum",
    "Africa/Khartoum",
    "Asia/Damascus",
    "Asia/Damascus",
    "Asia/Taipei",
    "Asia/Taipei",
    "Australia/Hobart",
    "Australia/Hobart",
    "America/Araguaina",
    "America/Araguaina",
    "Asia/Jayapura",
    "Asia/Tokyo",
    "Pacific/Palau",
    "Asia/Dili",
    "Etc/GMT-9",
    "Asia/Tokyo",
    "Asia/Tomsk",
    "Asia/Tomsk",
    "Pacific/Tongatapu",
    "Pacific/Tongatapu",
    "Asia/Chita",
    "Asia/Chita",
    "Europe/Istanbul",
    "Europe/Istanbul",
    "America/Grand_Turk",
    "America/Grand_Turk",
    "America/Indianapolis",
    "America/Indianapolis",
    "America/Creston",
    "America/Hermosillo",
    "America/Phoenix",
    "Etc/GMT+7",
    "America/Phoenix",
    "Etc/UTC",
    "Etc/UTC",
    "Pacific/Tarawa",
    "Pacific/Majuro",
    "Pacific/Nauru",
    "Pacific/Funafuti",
    "Pacific/Wake",
    "Pacific/Wallis",
    "Etc/GMT-12",
    "Etc/GMT-12",
    "Pacific/Enderbury",
    "Pacific/Fakaofo",
    "Etc/GMT-13",
    "Etc/GMT-13",
    "America/Noronha",
    "Atlantic/South_Georgia",
    "Etc/GMT+2",
    "Etc/GMT+2",
    "Pacific/Pitcairn",
    "Etc/GMT+8",
    "Etc/GMT+8",
    "Pacific/Gambier",
    "Etc/GMT+9",
    "Etc/GMT+9",
    "Pacific/Pago_Pago",
    "Pacific/Niue",
    "Pacific/Midway",
    "Etc/GMT+11",
    "Etc/GMT+11",
    "Asia/Ulaanbaatar",
    "Asia/Ulaanbaatar",
    "America/Caracas",
    "America/Caracas",
    "Asia/Vladivostok",
    "Asia/Vladivostok",
    "Europe/Volgograd",
    "Europe/Volgograd",
    "Australia/Perth",
    "Australia/Perth",
    "Africa/Luanda",
    "Africa/Porto-Novo",
    "Africa/Kinshasa",
    "Africa/Bangui",
    "Africa/Brazzaville",
    "Africa/Douala",
    "Africa/Algiers",
    "Africa/Libreville",
    "Africa/Malabo",
    "Africa/Niamey",
    "Africa/Lagos",
    "Africa/Ndjamena",
    "Africa/Tunis",
    "Etc/GMT-1",
    "Africa/Lagos",
    "Europe/Andorra",
    "Europe/Vienna",
    "Europe/Zurich",
    "Europe/Berlin",
    "Europe/Gibraltar",
    "Europe/Rome",
    "Europe/Vaduz",
    "Europe/Luxembourg",
    "Europe/Monaco",
    "Europe/Malta",
    "Europe/Amsterdam",
    "Europe/Oslo",
    "Europe/Stockholm",
    "Arctic/Longyearbyen",
    "Europe/San_Marino",
    "Europe/Vatican",
    "Europe/Berlin",
    "Asia/Hovd",
    "Asia/Hovd",
    "Antarctica/Mawson",
    "Asia/Oral",
    "Indian/Maldives",
    "Indian/Kerguelen",
    "Asia/Dushanbe",
    "Asia/Ashgabat",
    "Asia/Tashkent",
    "Etc/GMT-5",
    "Asia/Tashkent",
    "Asia/Hebron",
    "Asia/Hebron",
    "Antarctica/DumontDUrville",
    "Pacific/Truk",
    "Pacific/Guam",
    "Pacific/Saipan",
    "Pacific/Port_Moresby",
    "Etc/GMT-10",
    "Pacific/Port_Moresby",
    "Asia/Yakutsk",
    "Asia/Yakutsk",
    "America/Whitehorse",
    "America/Whitehorse",
];

String windows_timezone_id_to_acorn_id(char[OS_TIMEZONE_ID_LEN] win_timezone_id) {

    // Geo-locating the user to better determine time zone id.
    //
    const MAX_REGION_LENGTH = 4'i32;
    char[MAX_REGION_LENGTH] geo_region = ---;
    int32 geo_user_id = win32.GetUserGeoID(win32.GEOCLASS_NATION);

    if win32.GetGeoInfoA(geo_user_id,
                         win32.GEO_ISO2,
                         geo_region,
                         MAX_REGION_LENGTH,
                         0) == 0 {
        // GetGeoInfoA failed falling back to using language codes (LCID)
        // for the country.
        //
        uint32 lcid = win32.GetUserDefaultLCID();
        bool err = win32.GetLocaleInfoA(lcid,
                                        win32.LOCALE_SISO3166CTRYNAME,
                                        geo_region,
                                        MAX_REGION_LENGTH) == 0;
        err &= win32.GetLocaleInfoA(lcid,
                                    win32.LOCALE_SISO3166CTRYNAME,
                                    geo_region,
                                    MAX_REGION_LENGTH) == 0;
        if err {
            geo_region[0] = '\0';
        }
    }

    int count = 0;
    loop const win_name : windows_timezone_names {
        int name_length = find_character(win_name, 500, ':');
        if strlen(win_timezone_id) != name_length {
            ++count;
            continue;
        }

        // Check that the IDs match.
        if memcmp(win_timezone_id, win_name, name_length) == 0 {
            // Check that the regions match.
            const win_region = win_name + name_length + 1;
            if strcmp(win_region, geo_region) == 0 ||
               strcmp(win_region, "001") == 0 {
                // Found exact match!
                return String{ windows_timezones_mapping[count] };
            }
        }

        ++count;
    }

    return String{};
}

#endif // OS_GROUP_WINDOWS

public TimeZone sys_timezone() {
    // TODO: This function is incomplete due to a lack of language support for file reading
    // and just overall complications when obtaining timezones. The iana database contains
    // necessary timezone information. However, the data in the database is not straight forward
    // and seems to include data for changes in timezone rules. It behaves as a historical record
    // for timezones.
    //
    // The database may be accessed here:
    // https://www.iana.org/time-zones
    //
    // I believe the provided `tzdata.zi` file contains the required data to retrieve offsets. It
    // should likely be converted into a better format before use or discarded entirely in favor
    // of readonly data in the program, whatever ends up being an efficient solution.
    //

#if OS_GROUP_WINDOWS

    bool value_unknown = false, gmt_offset = false;
    char[OS_TIMEZONE_ID_LEN] win_timezone_id = get_windows_timezone_id(&value_unknown, &gmt_offset);

    if value_unknown {
        // TODO: handle this case better.
        return TimeZone{};
    }

    TimeZone time_zone;
    if gmt_offset {
        time_zone.id = String{ win_timezone_id };
    } else {
        time_zone.id = windows_timezone_id_to_acorn_id(win_timezone_id);
        if time_zone.id.empty() {
            // Couldn't match it in the file. This can happen due to the file being
            // outdated so going to fallback to using GMT.
            get_timezone_id_directly_from_registry_by_bias_only(win_timezone_id);
            time_zone.id = String{ win_timezone_id };
        }
    }

    return time_zone;

#else
    // TODO: unix implementation
    return TimeZone{};
#endif
}
