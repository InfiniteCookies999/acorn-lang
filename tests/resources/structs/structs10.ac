
#if OS_GROUP_WINDOWS

native dllimport void* GetStdHandle(uint32 nStdHandle);

native dllimport int32 WriteFile(void*       hFile,
                                 const void* lpBuffer,
                                 uint32      nNumberOfBytesToWrite,
                                 uint32*     lpNumberOfBytesWritten,
                                 void*       lpOverlapped);

#elif OS_GROUP_UNIX

native isize write(int32 fd, const void* buf, usize count);

#endif

void write_val(int val) {

#if OS_GROUP_WINDOWS
    void* handle = GetStdHandle(-11);
    uint32 written;
    char c = as(char) val;
    WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    char c = as(char) val;
    write(1, &c, 1);
#endif

}

struct A {
    int a = 65;
    int b = 66;
    int c = 67;
}

void main() {
    A[3][2] a;

    write_val(a[0][0].a);
    write_val(a[0][0].b);
    write_val(a[0][0].c);
    write_val(a[0][1].a);
    write_val(a[0][1].b);
    write_val(a[0][1].c);

    write_val(a[1][0].a);
    write_val(a[1][0].b);
    write_val(a[1][0].c);
    write_val(a[1][1].a);
    write_val(a[1][1].b);
    write_val(a[1][1].c);

    write_val(a[2][0].a);
    write_val(a[2][0].b);
    write_val(a[2][0].c);
    write_val(a[2][1].a);
    write_val(a[2][1].b);
    write_val(a[2][1].c);

}