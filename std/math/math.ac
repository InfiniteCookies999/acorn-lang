#file(access=public, namespace=math)

/*
 * The ratio between the circumference and diameter of a circle.
 */
const PI = 3.14159265358979323846;

/*
 * The ratio between the circumference and radius of a circle.
 * 
 * TAU = 2*PI
 */
const TAU = 6.28318530717958647692;

/*
 * The base of the natural logorithm.
 */
const E = 2.7182818284590452354;

/*
 * Constant which when multiplied by converts a value in degrees
 * to a value in radians.
 *
 * Or use: math.to_radians() function.
 */
const DEGREES_TO_RADIANS = 0.017453292519943295;

/*
 * Constant which when multiplied by converts a value in radians
 * to a value in degrees.
 *
 * Or use: math.to_degrees() function.
 */
const RADIANS_TO_DEGREES = 57.29577951308232;

/*
 * Converts the angle in degrees to radians.
 */
float64 to_radians(float64 angle) {
    return angle * DEGREES_TO_RADIANS;
}

/*
 * Converts the angle in degrees to radians.
 */
float32 to_radians(float32 angle) {
    return as(float32) (angle * DEGREES_TO_RADIANS);
}

/*
 * Converts the angle in radians to degrees.
 */
float64 to_degrees(float64 angle) {
    return angle * RADIANS_TO_DEGREES;
}

/*
 * Converts the angle in radians to degrees.
 */
float32 to_degrees(float32 angle) {
    return angle * RADIANS_TO_DEGREES;
}

/*
 * Calculates the smallest mathematical integer
 * not less than x.
 *
 * Example: floor(4.3) == 4.0
 */
native float64 floor(float64 x);

/*
 * Calculates the smallest mathematical integer
 * not less than x.
 *
 * Example: floor(4.3) == 4.0
 */
native float32 floor(float32 x);

/*
 * Calculates the largest mathematical integer
 * not greater than x.
 *
 * Example: floor(4.3) == 5.0
 */
native float64 ceil(float64 x);

/*
 * Calculates the largest mathematical integer
 * not greater than x.
 *
 * Example: floor(4.3) == 5.0
 */
native float32 ceil(float32 x);

/*
 * Calculates x raised to the power of exp.
 */
native float64 pow(float64 x, float64 exp);

/*
 * Calculates x raised to the power of exp.
 */
native float32 pow(float32 x, float32 exp);

/*
 * Calculates the natural logorithm of x.
 *
 * The natural logorithm is a logorithm with
 * base e, Euler's number. This function is
 * often denoted as just "log(x)" in maths.
 */
native("log") float64 ln(float64 x);

/*
 * Calculates the natural logorithm of x.
 *
 * The natural logorithm is a logorithm with
 * base e, Euler's number. This function is
 * often denoted as just "log(x)" in maths.
 */
native("log") float32 ln(float32 x);

/*
 * Calculates the logorithm of x with a
 * base of 10.
 */
native float64 log10(float64 x);

/*
 * Calculates the logorithm of x with a
 * base of 10.
 */
native float32 log10(float32 x);

/*
 * Returns the positive sqrt of x.
 *
 * If x is less than 0 then nan is returned.
 */
native float64 sqrt(float64 x);

/*
 * Returns the positive sqrt of x.
 *
 * If x is less than 0 then nan is returned.
 */
native float32 sqrt(float32 x);

/*
 * Returns the trigonometric sine of angle x.
 *
 * @param x an angle in radians.
 */
native float64 sin(float64 x);

/*
 * Returns the trigonometric sine of angle x.
 *
 * @param x an angle in radians.
 */
native float32 sin(float32 x);

/*
 * Returns the trigonometric cosine of angle x.
 *
 * @param x an angle in radians.
 */
native float64 cos(float64 x);

/*
 * Returns the trigonometric cosine of angle x.
 *
 * @param x an angle in radians.
 */
native float32 cos(float32 x);

/*
 * Returns the trigonometric tangent of angle x.
 *
 * @param x an angle in radians.
 */
native float64 tan(float64 x);

/*
 * Returns the trigonometric tangent of angle x.
 *
 * @param x an angle in radians.
 */
native float32 tan(float32 x);

/*
 * Returns the trigonometric arc sine (inverse of sin)
 * of angle x.
 *
 * @param x an angle in radians.
 */
native float64 asin(float64 x);

/*
 * Returns the trigonometric arc sine (inverse of sin)
 * of angle x.
 *
 * @param x an angle in radians.
 */
native float32 asin(float32 x);

/*
 * Returns the trigonometric arc cosine (inverse of cos)
 * of angle x.
 *
 * @param x an angle in radians.
 */
native float64 acos(float64 x);

/*
 * Returns the trigonometric arc cosine (inverse of cos)
 * of angle x.
 *
 * @param x an angle in radians.
 */
native float32 acos(float32 x);

/*
 * Returns the trigonometric arc tangent (inverse of tan)
 * of angle x.
 *
 * @param x an angle in radians.
 */
native float64 atan(float64 x);

/*
 * Returns the trigonometric arc tangent (inverse of tan)
 * of angle x.
 *
 * @param x an angle in radians.
 */
native float32 atan(float32 x);

// -- Other functions we should include at some point:
//    * Hyperbolic trigonometric functions.
//    * atan2
//    * clamp functions
//