
#if OS_GROUP_WINDOWS

native dllimport fn GetStdHandle(nStdHandle: uint32) -> void*;

native dllimport fn WriteFile(hFile:                  void*,
                              lpBuffer:               const void*,
                              nNumberOfBytesToWrite:  uint32,
                              lpNumberOfBytesWritten: uint32*,
                              lpOverlapped:           void*
                              ) -> int32;

#elif OS_GROUP_UNIX

native fn write(fd: int32, buf: const void*, count: usize) -> isize;

#endif

fn write_val(val: int) {

#if OS_GROUP_WINDOWS
    handle: void* = GetStdHandle(-11);
    written: uint32;
    c: char = as(char) val;
    WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    c: char = as(char) val;
    write(1, &c, 1);
#endif

}

interface A {
    fn foo();
}

struct B :: *A {
    a: int;
    b: int;

    fn foo() {
        write_val(a);
        write_val(b);
    }
}

fn main() {

    bs: B[5];
    bs[0].a = 65;
    bs[0].b = 66;
    bs[1].a = 65;
    bs[1].b = 66;
    bs[2].a = 65;
    bs[2].b = 66;
    bs[3].a = 65;
    bs[3].b = 66;
    bs[4].a = 65;
    bs[4].b = 66;

    a1: A* = &bs[0];
    a2: A* = &bs[0];
    a3: A* = &bs[0];
    a4: A* = &bs[0];
    a5: A* = &bs[0];

    a1.foo();
    a2.foo();
    a3.foo();
    a4.foo();
    a5.foo();

}