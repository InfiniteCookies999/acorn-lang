
#if OS_GROUP_WINDOWS

native dllimport void* GetStdHandle(uint32 nStdHandle);

native dllimport int32 WriteFile(void*       hFile,
                                 const void* lpBuffer,
                                 uint32      nNumberOfBytesToWrite,
                                 uint32*     lpNumberOfBytesWritten,
                                 void*       lpOverlapped);

#elif OS_GROUP_UNIX

native isize write(int32 fd, const void* buf, usize count);

#endif

void write_val(int val) {

#if OS_GROUP_WINDOWS
    void* handle = GetStdHandle(-11);
    uint32 written;
    char c = as(char) val;
    WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    char c = as(char) val;
    write(1, &c, 1);
#endif

}

generics[X, Y, T, U]
U foo(X x, Y y, T a, U b) {
    return x + y + a + b;
}

void main() {

    int v1 = foo(int, int, U=int, T=int)(5, 7, 28, 3);
    write_val(v1);

    float32 v2 = foo(float32, int, U=float32, T=int)(5.0f, 7, 28, 3.0f);
    int v3 = as(int)v2;
    write_val(v3);

}