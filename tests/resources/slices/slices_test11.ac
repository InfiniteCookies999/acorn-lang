
#if OS_GROUP_WINDOWS

native dllimport fn GetStdHandle(nStdHandle: uint32) -> void*;

native dllimport fn WriteFile(hFile:                  void*,
                              lpBuffer:               const void*,
                              nNumberOfBytesToWrite:  uint32,
                              lpNumberOfBytesWritten: uint32*,
                              lpOverlapped:           void*
                              ) -> int32;

#elif OS_GROUP_UNIX

native fn write(fd: int32, buf: const void*, count: usize) -> isize;

#endif

fn write_val(val: int) {

#if OS_GROUP_WINDOWS
    handle: void* = GetStdHandle(-11);
    written: uint32;
    c: char = as(char) val;
    WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    c: char = as(char) val;
    write(1, &c, 1);
#endif

}

fn get_slice(a: int[4], t: bool) -> int[..] {
    s1: int[..] = a;
    s2: int[..] = a;

    if t {
        return s1;
    }

    return s2;
}

fn main() {

    a1: int[4] = [ 76, 101, 116, 115 ];
    a2: int[4] = [ 32, 103, 111, 33 ];

    s1: int[..] = get_slice(a1, true);
    s2: int[..] = get_slice(a2, false);

    write_val(s1[0]);
    write_val(s1[1]);
    write_val(s1[2]);
    write_val(s1[3]);
    write_val(s2[0]);
    write_val(s2[1]);
    write_val(s2[2]);
    write_val(s2[3]);
}