
#if OS_GROUP_WINDOWS

native dllimport fn GetStdHandle(nStdHandle: uint32) -> void*;

native dllimport fn WriteFile(hFile:                  void*,
                              lpBuffer:               const void*,
                              nNumberOfBytesToWrite:  uint32,
                              lpNumberOfBytesWritten: uint32*,
                              lpOverlapped:           void*
                              ) -> int32;

#elif OS_GROUP_UNIX

native fn write(fd: int32, buf: const void*, count: usize) -> isize;

#endif

fn write_val(val: int) {

#if OS_GROUP_WINDOWS
    handle: void* = GetStdHandle(-11);
    written: uint32;
    c: char = as(char) val;
    WriteFile(handle, &c, 1, &written, null);
#elif OS_GROUP_UNIX
    c: char = as(char) val;
    write(1, &c, 1);
#endif

}

struct A {
    v1: int32;
    v2: int32;
    v3: int32;
    v4: int32;
    v5: int32;
    v6: int32;
}

fn main() {
    a: int[10];

    write_val(a[0] + 65);
    write_val(a[1] + 66);
    write_val(a[2] + 67);
    write_val(a[9] + 68);

    a1: A;

    write_val(as(int) a1.v1 + 65);
    write_val(as(int) a1.v2 + 66);
    write_val(as(int) a1.v3 + 67);
    write_val(as(int) a1.v6 + 68);
}